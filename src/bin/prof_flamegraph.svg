<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (1 samples, 0.06%)</title><rect x="0.0000%" y="261" width="0.0587%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="271.50"></text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (1 samples, 0.06%)</title><rect x="0.0000%" y="245" width="0.0587%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="255.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (1 samples, 0.06%)</title><rect x="0.0000%" y="229" width="0.0587%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="0.0587%" y="245" width="0.0587%" height="15" fill="rgb(248,212,6)"/><text x="0.3087%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="0.1173%" y="229" width="0.0587%" height="15" fill="rgb(208,68,35)"/><text x="0.3673%" y="239.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (1 samples, 0.06%)</title><rect x="0.1760%" y="229" width="0.0587%" height="15" fill="rgb(232,128,0)"/><text x="0.4260%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="0.1760%" y="213" width="0.0587%" height="15" fill="rgb(207,160,47)"/><text x="0.4260%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.12%)</title><rect x="0.2933%" y="197" width="0.1173%" height="15" fill="rgb(228,23,34)"/><text x="0.5433%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="0.2933%" y="181" width="0.1173%" height="15" fill="rgb(218,30,26)"/><text x="0.5433%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.12%)</title><rect x="0.2933%" y="165" width="0.1173%" height="15" fill="rgb(220,122,19)"/><text x="0.5433%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="0.5279%" y="181" width="0.0587%" height="15" fill="rgb(250,228,42)"/><text x="0.7779%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.23%)</title><rect x="0.4106%" y="197" width="0.2346%" height="15" fill="rgb(240,193,28)"/><text x="0.6606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="0.5865%" y="181" width="0.0587%" height="15" fill="rgb(216,20,37)"/><text x="0.8365%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="0.5865%" y="165" width="0.0587%" height="15" fill="rgb(206,188,39)"/><text x="0.8365%" y="175.50"></text></g><g><title>prof`__rdl_realloc (1 samples, 0.06%)</title><rect x="0.6452%" y="197" width="0.0587%" height="15" fill="rgb(217,207,13)"/><text x="0.8952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.12%)</title><rect x="0.8798%" y="181" width="0.1173%" height="15" fill="rgb(231,73,38)"/><text x="1.1298%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.12%)</title><rect x="0.8798%" y="165" width="0.1173%" height="15" fill="rgb(225,20,46)"/><text x="1.1298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="0.8798%" y="149" width="0.1173%" height="15" fill="rgb(210,31,41)"/><text x="1.1298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="0.8798%" y="133" width="0.1173%" height="15" fill="rgb(221,200,47)"/><text x="1.1298%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="0.9384%" y="117" width="0.0587%" height="15" fill="rgb(226,26,5)"/><text x="1.1884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="0.9384%" y="101" width="0.0587%" height="15" fill="rgb(249,33,26)"/><text x="1.1884%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.12%)</title><rect x="1.0557%" y="133" width="0.1173%" height="15" fill="rgb(235,183,28)"/><text x="1.3057%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="1.0557%" y="117" width="0.1173%" height="15" fill="rgb(221,5,38)"/><text x="1.3057%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="1.1144%" y="101" width="0.0587%" height="15" fill="rgb(247,18,42)"/><text x="1.3644%" y="111.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.53%)</title><rect x="0.7038%" y="197" width="0.5279%" height="15" fill="rgb(241,131,45)"/><text x="0.9538%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.23%)</title><rect x="0.9971%" y="181" width="0.2346%" height="15" fill="rgb(249,31,29)"/><text x="1.2471%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.18%)</title><rect x="1.0557%" y="165" width="0.1760%" height="15" fill="rgb(225,111,53)"/><text x="1.3057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.18%)</title><rect x="1.0557%" y="149" width="0.1760%" height="15" fill="rgb(238,160,17)"/><text x="1.3057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="1.1730%" y="133" width="0.0587%" height="15" fill="rgb(214,148,48)"/><text x="1.4230%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="1.1730%" y="117" width="0.0587%" height="15" fill="rgb(232,36,49)"/><text x="1.4230%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.06%)</title><rect x="1.3490%" y="181" width="0.0587%" height="15" fill="rgb(209,103,24)"/><text x="1.5990%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="1.4076%" y="181" width="0.0587%" height="15" fill="rgb(229,88,8)"/><text x="1.6576%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="1.4076%" y="165" width="0.0587%" height="15" fill="rgb(213,181,19)"/><text x="1.6576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="1.5249%" y="165" width="0.0587%" height="15" fill="rgb(254,191,54)"/><text x="1.7749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.41%)</title><rect x="1.4663%" y="181" width="0.4106%" height="15" fill="rgb(241,83,37)"/><text x="1.7163%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.29%)</title><rect x="1.5836%" y="165" width="0.2933%" height="15" fill="rgb(233,36,39)"/><text x="1.8336%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.18%)</title><rect x="1.8768%" y="181" width="0.1760%" height="15" fill="rgb(226,3,54)"/><text x="2.1268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.18%)</title><rect x="1.8768%" y="165" width="0.1760%" height="15" fill="rgb(245,192,40)"/><text x="2.1268%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="1.9355%" y="149" width="0.1173%" height="15" fill="rgb(238,167,29)"/><text x="2.1855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="1.9355%" y="133" width="0.1173%" height="15" fill="rgb(232,182,51)"/><text x="2.1855%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="2.0528%" y="181" width="0.0587%" height="15" fill="rgb(231,60,39)"/><text x="2.3028%" y="191.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (2 samples, 0.12%)</title><rect x="2.1114%" y="181" width="0.1173%" height="15" fill="rgb(208,69,12)"/><text x="2.3614%" y="191.50"></text></g><g><title>prof`__rust_alloc (1 samples, 0.06%)</title><rect x="2.2287%" y="181" width="0.0587%" height="15" fill="rgb(235,93,37)"/><text x="2.4787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="2.3460%" y="133" width="0.0587%" height="15" fill="rgb(213,116,39)"/><text x="2.5960%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.12%)</title><rect x="2.4047%" y="117" width="0.1173%" height="15" fill="rgb(222,207,29)"/><text x="2.6547%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="2.4633%" y="101" width="0.0587%" height="15" fill="rgb(206,96,30)"/><text x="2.7133%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="2.5806%" y="85" width="0.0587%" height="15" fill="rgb(218,138,4)"/><text x="2.8306%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.18%)</title><rect x="2.5220%" y="117" width="0.1760%" height="15" fill="rgb(250,191,14)"/><text x="2.7720%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.18%)</title><rect x="2.5220%" y="101" width="0.1760%" height="15" fill="rgb(239,60,40)"/><text x="2.7720%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="2.6393%" y="85" width="0.0587%" height="15" fill="rgb(206,27,48)"/><text x="2.8893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="2.6979%" y="117" width="0.0587%" height="15" fill="rgb(225,35,8)"/><text x="2.9479%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="2.6979%" y="101" width="0.0587%" height="15" fill="rgb(250,213,24)"/><text x="2.9479%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.41%)</title><rect x="2.4047%" y="133" width="0.4106%" height="15" fill="rgb(247,123,22)"/><text x="2.6547%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.06%)</title><rect x="2.7566%" y="117" width="0.0587%" height="15" fill="rgb(231,138,38)"/><text x="3.0066%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.53%)</title><rect x="2.3460%" y="149" width="0.5279%" height="15" fill="rgb(231,145,46)"/><text x="2.5960%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="2.8152%" y="133" width="0.0587%" height="15" fill="rgb(251,118,11)"/><text x="3.0652%" y="143.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.65%)</title><rect x="2.2874%" y="181" width="0.6452%" height="15" fill="rgb(217,147,25)"/><text x="2.5374%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.59%)</title><rect x="2.3460%" y="165" width="0.5865%" height="15" fill="rgb(247,81,37)"/><text x="2.5960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="2.8739%" y="149" width="0.0587%" height="15" fill="rgb(209,12,38)"/><text x="3.1239%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="2.8739%" y="133" width="0.0587%" height="15" fill="rgb(227,1,9)"/><text x="3.1239%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (2 samples, 0.12%)</title><rect x="3.2258%" y="165" width="0.1173%" height="15" fill="rgb(248,47,43)"/><text x="3.4758%" y="175.50"></text></g><g><title>prof`__rdl_alloc (1 samples, 0.06%)</title><rect x="3.3431%" y="165" width="0.0587%" height="15" fill="rgb(221,10,30)"/><text x="3.5931%" y="175.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (65 samples, 3.81%)</title><rect x="0.1173%" y="245" width="3.8123%" height="15" fill="rgb(210,229,1)"/><text x="0.3673%" y="255.50">prof..</text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (63 samples, 3.70%)</title><rect x="0.2346%" y="229" width="3.6950%" height="15" fill="rgb(222,148,37)"/><text x="0.4846%" y="239.50">prof..</text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (63 samples, 3.70%)</title><rect x="0.2346%" y="213" width="3.6950%" height="15" fill="rgb(234,67,33)"/><text x="0.4846%" y="223.50">prof..</text></g><g><title>prof`cress::engine::piece::Piece::all_moves (46 samples, 2.70%)</title><rect x="1.2317%" y="197" width="2.6979%" height="15" fill="rgb(247,98,35)"/><text x="1.4817%" y="207.50">pr..</text></g><g><title>prof`cress::engine::piece::generate_moves (17 samples, 1.00%)</title><rect x="2.9326%" y="181" width="0.9971%" height="15" fill="rgb(247,138,52)"/><text x="3.1826%" y="191.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.53%)</title><rect x="3.4018%" y="165" width="0.5279%" height="15" fill="rgb(213,79,30)"/><text x="3.6518%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.53%)</title><rect x="3.4018%" y="149" width="0.5279%" height="15" fill="rgb(246,177,23)"/><text x="3.6518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (9 samples, 0.53%)</title><rect x="3.4018%" y="133" width="0.5279%" height="15" fill="rgb(230,62,27)"/><text x="3.6518%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.47%)</title><rect x="3.4604%" y="117" width="0.4692%" height="15" fill="rgb(216,154,8)"/><text x="3.7104%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.41%)</title><rect x="3.5191%" y="101" width="0.4106%" height="15" fill="rgb(244,35,45)"/><text x="3.7691%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.12%)</title><rect x="3.8123%" y="85" width="0.1173%" height="15" fill="rgb(251,115,12)"/><text x="4.0623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="3.9883%" y="229" width="0.0587%" height="15" fill="rgb(240,54,50)"/><text x="4.2383%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="3.9883%" y="213" width="0.0587%" height="15" fill="rgb(233,84,52)"/><text x="4.2383%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="4.0469%" y="229" width="0.0587%" height="15" fill="rgb(207,117,47)"/><text x="4.2969%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="4.0469%" y="213" width="0.0587%" height="15" fill="rgb(249,43,39)"/><text x="4.2969%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.23%)</title><rect x="4.1056%" y="229" width="0.2346%" height="15" fill="rgb(209,38,44)"/><text x="4.3556%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.06%)</title><rect x="5.8065%" y="213" width="0.0587%" height="15" fill="rgb(236,212,23)"/><text x="6.0565%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="5.8651%" y="213" width="0.0587%" height="15" fill="rgb(242,79,21)"/><text x="6.1151%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="5.8651%" y="197" width="0.0587%" height="15" fill="rgb(211,96,35)"/><text x="6.1151%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.35%)</title><rect x="5.9238%" y="213" width="0.3519%" height="15" fill="rgb(253,215,40)"/><text x="6.1738%" y="223.50"></text></g><g><title>prof`DYLD-STUB$$memcpy (1 samples, 0.06%)</title><rect x="6.2757%" y="213" width="0.0587%" height="15" fill="rgb(211,81,21)"/><text x="6.5257%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.06%)</title><rect x="6.3343%" y="165" width="0.0587%" height="15" fill="rgb(208,190,38)"/><text x="6.5843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="6.3930%" y="149" width="0.0587%" height="15" fill="rgb(235,213,38)"/><text x="6.6430%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="6.4516%" y="149" width="0.0587%" height="15" fill="rgb(237,122,38)"/><text x="6.7016%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="6.4516%" y="133" width="0.0587%" height="15" fill="rgb(244,218,35)"/><text x="6.7016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.12%)</title><rect x="6.5103%" y="149" width="0.1173%" height="15" fill="rgb(240,68,47)"/><text x="6.7603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.35%)</title><rect x="6.3343%" y="181" width="0.3519%" height="15" fill="rgb(210,16,53)"/><text x="6.5843%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.29%)</title><rect x="6.3930%" y="165" width="0.2933%" height="15" fill="rgb(235,124,12)"/><text x="6.6430%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="6.6276%" y="149" width="0.0587%" height="15" fill="rgb(224,169,11)"/><text x="6.8776%" y="159.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.41%)</title><rect x="6.3343%" y="213" width="0.4106%" height="15" fill="rgb(250,166,2)"/><text x="6.5843%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.41%)</title><rect x="6.3343%" y="197" width="0.4106%" height="15" fill="rgb(242,216,29)"/><text x="6.5843%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="6.6862%" y="181" width="0.0587%" height="15" fill="rgb(230,116,27)"/><text x="6.9362%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="6.6862%" y="165" width="0.0587%" height="15" fill="rgb(228,99,48)"/><text x="6.9362%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.18%)</title><rect x="6.8035%" y="197" width="0.1760%" height="15" fill="rgb(253,11,6)"/><text x="7.0535%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="6.8035%" y="181" width="0.1760%" height="15" fill="rgb(247,143,39)"/><text x="7.0535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="6.8035%" y="165" width="0.1760%" height="15" fill="rgb(236,97,10)"/><text x="7.0535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.23%)</title><rect x="6.9795%" y="197" width="0.2346%" height="15" fill="rgb(233,208,19)"/><text x="7.2295%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="7.0968%" y="181" width="0.1173%" height="15" fill="rgb(216,164,2)"/><text x="7.3468%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="7.1554%" y="165" width="0.0587%" height="15" fill="rgb(220,129,5)"/><text x="7.4054%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="7.2141%" y="197" width="0.0587%" height="15" fill="rgb(242,17,10)"/><text x="7.4641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="7.5073%" y="117" width="0.0587%" height="15" fill="rgb(242,107,0)"/><text x="7.7573%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="7.5073%" y="133" width="0.1173%" height="15" fill="rgb(251,28,31)"/><text x="7.7573%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="7.5660%" y="117" width="0.0587%" height="15" fill="rgb(233,223,10)"/><text x="7.8160%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="7.6246%" y="133" width="0.0587%" height="15" fill="rgb(215,21,27)"/><text x="7.8746%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="7.6246%" y="117" width="0.0587%" height="15" fill="rgb(232,23,21)"/><text x="7.8746%" y="127.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.53%)</title><rect x="7.2727%" y="197" width="0.5279%" height="15" fill="rgb(244,5,23)"/><text x="7.5227%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.41%)</title><rect x="7.3900%" y="181" width="0.4106%" height="15" fill="rgb(226,81,46)"/><text x="7.6400%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.41%)</title><rect x="7.3900%" y="165" width="0.4106%" height="15" fill="rgb(247,70,30)"/><text x="7.6400%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.35%)</title><rect x="7.4487%" y="149" width="0.3519%" height="15" fill="rgb(212,68,19)"/><text x="7.6987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.12%)</title><rect x="7.6833%" y="133" width="0.1173%" height="15" fill="rgb(240,187,13)"/><text x="7.9333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.12%)</title><rect x="8.0352%" y="181" width="0.1173%" height="15" fill="rgb(223,113,26)"/><text x="8.2852%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="8.0352%" y="165" width="0.1173%" height="15" fill="rgb(206,192,2)"/><text x="8.2852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.12%)</title><rect x="8.0352%" y="149" width="0.1173%" height="15" fill="rgb(241,108,4)"/><text x="8.2852%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.18%)</title><rect x="8.1525%" y="181" width="0.1760%" height="15" fill="rgb(247,173,49)"/><text x="8.4025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="8.2111%" y="165" width="0.1173%" height="15" fill="rgb(224,114,35)"/><text x="8.4611%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="8.2111%" y="149" width="0.1173%" height="15" fill="rgb(245,159,27)"/><text x="8.4611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.35%)</title><rect x="8.3284%" y="181" width="0.3519%" height="15" fill="rgb(245,172,44)"/><text x="8.5784%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.35%)</title><rect x="8.3284%" y="165" width="0.3519%" height="15" fill="rgb(236,23,11)"/><text x="8.5784%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.35%)</title><rect x="8.3284%" y="149" width="0.3519%" height="15" fill="rgb(205,117,38)"/><text x="8.5784%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.29%)</title><rect x="8.3871%" y="133" width="0.2933%" height="15" fill="rgb(237,72,25)"/><text x="8.6371%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.12%)</title><rect x="8.5630%" y="117" width="0.1173%" height="15" fill="rgb(244,70,9)"/><text x="8.8130%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="8.6217%" y="101" width="0.0587%" height="15" fill="rgb(217,125,39)"/><text x="8.8717%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.35%)</title><rect x="8.7977%" y="117" width="0.3519%" height="15" fill="rgb(235,36,10)"/><text x="9.0477%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.18%)</title><rect x="8.9736%" y="101" width="0.1760%" height="15" fill="rgb(251,123,47)"/><text x="9.2236%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.18%)</title><rect x="8.9736%" y="85" width="0.1760%" height="15" fill="rgb(221,13,13)"/><text x="9.2236%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.23%)</title><rect x="9.1496%" y="117" width="0.2346%" height="15" fill="rgb(238,131,9)"/><text x="9.3996%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.23%)</title><rect x="9.1496%" y="101" width="0.2346%" height="15" fill="rgb(211,50,8)"/><text x="9.3996%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.12%)</title><rect x="9.2669%" y="85" width="0.1173%" height="15" fill="rgb(245,182,24)"/><text x="9.5169%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="9.3255%" y="69" width="0.0587%" height="15" fill="rgb(242,14,37)"/><text x="9.5755%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.70%)</title><rect x="8.7390%" y="149" width="0.7038%" height="15" fill="rgb(246,228,12)"/><text x="8.9890%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.70%)</title><rect x="8.7390%" y="133" width="0.7038%" height="15" fill="rgb(213,55,15)"/><text x="8.9890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.06%)</title><rect x="9.3842%" y="117" width="0.0587%" height="15" fill="rgb(209,9,3)"/><text x="9.6342%" y="127.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.82%)</title><rect x="8.6804%" y="181" width="0.8211%" height="15" fill="rgb(230,59,30)"/><text x="8.9304%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.82%)</title><rect x="8.6804%" y="165" width="0.8211%" height="15" fill="rgb(209,121,21)"/><text x="8.9304%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="9.4428%" y="149" width="0.0587%" height="15" fill="rgb(220,109,13)"/><text x="9.6928%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="9.4428%" y="133" width="0.0587%" height="15" fill="rgb(232,18,1)"/><text x="9.6928%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (1 samples, 0.06%)</title><rect x="9.9120%" y="165" width="0.0587%" height="15" fill="rgb(215,41,42)"/><text x="10.1620%" y="175.50"></text></g><g><title>prof`__rust_alloc (1 samples, 0.06%)</title><rect x="9.9707%" y="165" width="0.0587%" height="15" fill="rgb(224,123,36)"/><text x="10.2207%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.18%)</title><rect x="10.2639%" y="85" width="0.1760%" height="15" fill="rgb(240,125,3)"/><text x="10.5139%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.53%)</title><rect x="10.0293%" y="149" width="0.5279%" height="15" fill="rgb(205,98,50)"/><text x="10.2793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.41%)</title><rect x="10.1466%" y="133" width="0.4106%" height="15" fill="rgb(205,185,37)"/><text x="10.3966%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.41%)</title><rect x="10.1466%" y="117" width="0.4106%" height="15" fill="rgb(238,207,15)"/><text x="10.3966%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.41%)</title><rect x="10.1466%" y="101" width="0.4106%" height="15" fill="rgb(213,199,42)"/><text x="10.3966%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.12%)</title><rect x="10.4399%" y="85" width="0.1173%" height="15" fill="rgb(235,201,11)"/><text x="10.6899%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="10.4985%" y="69" width="0.0587%" height="15" fill="rgb(207,46,11)"/><text x="10.7485%" y="79.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (66 samples, 3.87%)</title><rect x="6.7449%" y="213" width="3.8710%" height="15" fill="rgb(241,35,35)"/><text x="6.9949%" y="223.50">prof..</text></g><g><title>prof`cress::engine::piece::Piece::all_moves (48 samples, 2.82%)</title><rect x="7.8006%" y="197" width="2.8152%" height="15" fill="rgb(243,32,47)"/><text x="8.0506%" y="207.50">pr..</text></g><g><title>prof`cress::engine::piece::generate_moves (19 samples, 1.11%)</title><rect x="9.5015%" y="181" width="1.1144%" height="15" fill="rgb(247,202,23)"/><text x="9.7515%" y="191.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.59%)</title><rect x="10.0293%" y="165" width="0.5865%" height="15" fill="rgb(219,102,11)"/><text x="10.2793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="10.5572%" y="149" width="0.0587%" height="15" fill="rgb(243,110,44)"/><text x="10.8072%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="10.5572%" y="133" width="0.0587%" height="15" fill="rgb(222,74,54)"/><text x="10.8072%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.06%)</title><rect x="10.5572%" y="117" width="0.0587%" height="15" fill="rgb(216,99,12)"/><text x="10.8072%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="10.5572%" y="101" width="0.0587%" height="15" fill="rgb(226,22,26)"/><text x="10.8072%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="10.5572%" y="85" width="0.0587%" height="15" fill="rgb(217,163,10)"/><text x="10.8072%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.06%)</title><rect x="10.9091%" y="197" width="0.0587%" height="15" fill="rgb(213,25,53)"/><text x="11.1591%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.47%)</title><rect x="10.9677%" y="197" width="0.4692%" height="15" fill="rgb(252,105,26)"/><text x="11.2177%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="11.2610%" y="181" width="0.1760%" height="15" fill="rgb(220,39,43)"/><text x="11.5110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="11.2610%" y="165" width="0.1760%" height="15" fill="rgb(229,68,48)"/><text x="11.5110%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="11.6716%" y="181" width="0.0587%" height="15" fill="rgb(252,8,32)"/><text x="11.9216%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.29%)</title><rect x="12.0821%" y="165" width="0.2933%" height="15" fill="rgb(223,20,43)"/><text x="12.3321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 1.06%)</title><rect x="11.4370%" y="197" width="1.0557%" height="15" fill="rgb(229,81,49)"/><text x="11.6870%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.76%)</title><rect x="11.7302%" y="181" width="0.7625%" height="15" fill="rgb(236,28,36)"/><text x="11.9802%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.12%)</title><rect x="12.3754%" y="165" width="0.1173%" height="15" fill="rgb(249,185,26)"/><text x="12.6254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.23%)</title><rect x="12.4927%" y="197" width="0.2346%" height="15" fill="rgb(249,174,33)"/><text x="12.7427%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="12.7273%" y="197" width="0.0587%" height="15" fill="rgb(233,201,37)"/><text x="12.9773%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.35%)</title><rect x="12.7859%" y="197" width="0.3519%" height="15" fill="rgb(221,78,26)"/><text x="13.0359%" y="207.50"></text></g><g><title>prof`__rdl_dealloc (1 samples, 0.06%)</title><rect x="13.1378%" y="197" width="0.0587%" height="15" fill="rgb(250,127,30)"/><text x="13.3878%" y="207.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="13.1965%" y="197" width="0.0587%" height="15" fill="rgb(230,49,44)"/><text x="13.4465%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.70%)</title><rect x="18.4164%" y="181" width="0.7038%" height="15" fill="rgb(229,67,23)"/><text x="18.6664%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 1.58%)</title><rect x="20.8798%" y="165" width="1.5836%" height="15" fill="rgb(249,83,47)"/><text x="21.1298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 1.41%)</title><rect x="21.0557%" y="149" width="1.4076%" height="15" fill="rgb(215,43,3)"/><text x="21.3057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 3.46%)</title><rect x="19.1202%" y="181" width="3.4604%" height="15" fill="rgb(238,154,13)"/><text x="19.3702%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.12%)</title><rect x="22.4633%" y="165" width="0.1173%" height="15" fill="rgb(219,56,2)"/><text x="22.7133%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 1.52%)</title><rect x="27.8006%" y="149" width="1.5249%" height="15" fill="rgb(233,0,4)"/><text x="28.0506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (130 samples, 7.62%)</title><rect x="22.5806%" y="181" width="7.6246%" height="15" fill="rgb(235,30,7)"/><text x="22.8306%" y="191.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (89 samples, 5.22%)</title><rect x="24.9853%" y="165" width="5.2199%" height="15" fill="rgb(250,79,13)"/><text x="25.2353%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.88%)</title><rect x="29.3255%" y="149" width="0.8798%" height="15" fill="rgb(211,146,34)"/><text x="29.5755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.18%)</title><rect x="30.2053%" y="181" width="0.1760%" height="15" fill="rgb(228,22,38)"/><text x="30.4553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.12%)</title><rect x="30.3812%" y="181" width="0.1173%" height="15" fill="rgb(235,168,5)"/><text x="30.6312%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="30.4985%" y="181" width="0.1173%" height="15" fill="rgb(221,155,16)"/><text x="30.7485%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="30.6158%" y="181" width="0.1173%" height="15" fill="rgb(215,215,53)"/><text x="30.8658%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.47%)</title><rect x="30.7331%" y="181" width="0.4692%" height="15" fill="rgb(223,4,10)"/><text x="30.9831%" y="191.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (2 samples, 0.12%)</title><rect x="31.2023%" y="181" width="0.1173%" height="15" fill="rgb(234,103,6)"/><text x="31.4523%" y="191.50"></text></g><g><title>prof`__rdl_alloc (1 samples, 0.06%)</title><rect x="31.3196%" y="181" width="0.0587%" height="15" fill="rgb(227,97,0)"/><text x="31.5696%" y="191.50"></text></g><g><title>prof`__rdl_dealloc (1 samples, 0.06%)</title><rect x="31.3783%" y="181" width="0.0587%" height="15" fill="rgb(234,150,53)"/><text x="31.6283%" y="191.50"></text></g><g><title>prof`__rdl_realloc (2 samples, 0.12%)</title><rect x="31.4370%" y="181" width="0.1173%" height="15" fill="rgb(228,201,54)"/><text x="31.6870%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.12%)</title><rect x="32.3754%" y="101" width="0.1173%" height="15" fill="rgb(222,22,37)"/><text x="32.6254%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.76%)</title><rect x="32.0821%" y="165" width="0.7625%" height="15" fill="rgb(237,53,32)"/><text x="32.3321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (12 samples, 0.70%)</title><rect x="32.1408%" y="149" width="0.7038%" height="15" fill="rgb(233,25,53)"/><text x="32.3908%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.70%)</title><rect x="32.1408%" y="133" width="0.7038%" height="15" fill="rgb(210,40,34)"/><text x="32.3908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.70%)</title><rect x="32.1408%" y="117" width="0.7038%" height="15" fill="rgb(241,220,44)"/><text x="32.3908%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.35%)</title><rect x="32.4927%" y="101" width="0.3519%" height="15" fill="rgb(235,28,35)"/><text x="32.7427%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.23%)</title><rect x="32.6100%" y="85" width="0.2346%" height="15" fill="rgb(210,56,17)"/><text x="32.8600%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.06%)</title><rect x="33.2551%" y="149" width="0.0587%" height="15" fill="rgb(224,130,29)"/><text x="33.5051%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.23%)</title><rect x="33.6070%" y="133" width="0.2346%" height="15" fill="rgb(235,212,8)"/><text x="33.8570%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.06%)</title><rect x="33.8416%" y="133" width="0.0587%" height="15" fill="rgb(223,33,50)"/><text x="34.0916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.76%)</title><rect x="34.3109%" y="117" width="0.7625%" height="15" fill="rgb(219,149,13)"/><text x="34.5609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.35%)</title><rect x="34.7214%" y="101" width="0.3519%" height="15" fill="rgb(250,156,29)"/><text x="34.9714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="34.9560%" y="85" width="0.1173%" height="15" fill="rgb(216,193,19)"/><text x="35.2060%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.18%)</title><rect x="35.0733%" y="117" width="0.1760%" height="15" fill="rgb(216,135,14)"/><text x="35.3233%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.29%)</title><rect x="36.0117%" y="85" width="0.2933%" height="15" fill="rgb(241,47,5)"/><text x="36.2617%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 1.58%)</title><rect x="35.2493%" y="117" width="1.5836%" height="15" fill="rgb(233,42,35)"/><text x="35.4993%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 1.52%)</title><rect x="35.3079%" y="101" width="1.5249%" height="15" fill="rgb(231,13,6)"/><text x="35.5579%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.53%)</title><rect x="36.3050%" y="85" width="0.5279%" height="15" fill="rgb(207,181,40)"/><text x="36.5550%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.18%)</title><rect x="36.6569%" y="69" width="0.1760%" height="15" fill="rgb(254,173,49)"/><text x="36.9069%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.41%)</title><rect x="36.8328%" y="117" width="0.4106%" height="15" fill="rgb(221,1,38)"/><text x="37.0828%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.29%)</title><rect x="36.9501%" y="101" width="0.2933%" height="15" fill="rgb(206,124,46)"/><text x="37.2001%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.29%)</title><rect x="38.3578%" y="101" width="0.2933%" height="15" fill="rgb(249,21,11)"/><text x="38.6078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (30 samples, 1.76%)</title><rect x="37.2434%" y="117" width="1.7595%" height="15" fill="rgb(222,201,40)"/><text x="37.4934%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.35%)</title><rect x="38.6510%" y="101" width="0.3519%" height="15" fill="rgb(235,61,29)"/><text x="38.9010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (89 samples, 5.22%)</title><rect x="33.9003%" y="133" width="5.2199%" height="15" fill="rgb(219,207,3)"/><text x="34.1503%" y="143.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="39.0029%" y="117" width="0.1173%" height="15" fill="rgb(222,56,46)"/><text x="39.2529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="39.1202%" y="133" width="0.0587%" height="15" fill="rgb(239,76,54)"/><text x="39.3702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (101 samples, 5.92%)</title><rect x="33.3138%" y="149" width="5.9238%" height="15" fill="rgb(231,124,27)"/><text x="33.5638%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.06%)</title><rect x="39.1789%" y="133" width="0.0587%" height="15" fill="rgb(249,195,6)"/><text x="39.4289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.41%)</title><rect x="39.2375%" y="149" width="0.4106%" height="15" fill="rgb(237,174,47)"/><text x="39.4875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.35%)</title><rect x="39.2962%" y="133" width="0.3519%" height="15" fill="rgb(206,201,31)"/><text x="39.5462%" y="143.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (139 samples, 8.15%)</title><rect x="31.5543%" y="181" width="8.1525%" height="15" fill="rgb(231,57,52)"/><text x="31.8043%" y="191.50">prof`alloc:..</text></g><g><title>libsystem_malloc.dylib`realloc (117 samples, 6.86%)</title><rect x="32.8446%" y="165" width="6.8622%" height="15" fill="rgb(248,177,22)"/><text x="33.0946%" y="175.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="39.6481%" y="149" width="0.0587%" height="15" fill="rgb(215,211,37)"/><text x="39.8981%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.35%)</title><rect x="43.7537%" y="165" width="0.3519%" height="15" fill="rgb(241,128,51)"/><text x="44.0037%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.76%)</title><rect x="44.9853%" y="149" width="0.7625%" height="15" fill="rgb(227,165,31)"/><text x="45.2353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.65%)</title><rect x="45.1026%" y="133" width="0.6452%" height="15" fill="rgb(228,167,24)"/><text x="45.3526%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 1.70%)</title><rect x="44.1056%" y="165" width="1.7009%" height="15" fill="rgb(228,143,12)"/><text x="44.3556%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="45.7478%" y="149" width="0.0587%" height="15" fill="rgb(249,149,8)"/><text x="45.9978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="48.4457%" y="149" width="0.0587%" height="15" fill="rgb(243,35,44)"/><text x="48.6957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="48.5044%" y="149" width="0.0587%" height="15" fill="rgb(246,89,9)"/><text x="48.7544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 1.35%)</title><rect x="50.0880%" y="133" width="1.3490%" height="15" fill="rgb(233,213,13)"/><text x="50.3380%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (97 samples, 5.69%)</title><rect x="45.8065%" y="165" width="5.6891%" height="15" fill="rgb(233,141,41)"/><text x="46.0565%" y="175.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (50 samples, 2.93%)</title><rect x="48.5630%" y="149" width="2.9326%" height="15" fill="rgb(239,167,4)"/><text x="48.8130%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="51.4370%" y="133" width="0.0587%" height="15" fill="rgb(209,217,16)"/><text x="51.6870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.35%)</title><rect x="52.2581%" y="133" width="0.3519%" height="15" fill="rgb(219,88,35)"/><text x="52.5081%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="56.4809%" y="101" width="0.1173%" height="15" fill="rgb(220,193,23)"/><text x="56.7309%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (112 samples, 6.57%)</title><rect x="51.7302%" y="149" width="6.5689%" height="15" fill="rgb(230,90,52)"/><text x="51.9802%" y="159.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (97 samples, 5.69%)</title><rect x="52.6100%" y="133" width="5.6891%" height="15" fill="rgb(252,106,19)"/><text x="52.8600%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (90 samples, 5.28%)</title><rect x="53.0205%" y="117" width="5.2786%" height="15" fill="rgb(206,74,20)"/><text x="53.2705%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 1.70%)</title><rect x="56.5982%" y="101" width="1.7009%" height="15" fill="rgb(230,138,44)"/><text x="56.8482%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="58.1818%" y="85" width="0.1173%" height="15" fill="rgb(235,182,43)"/><text x="58.4318%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (117 samples, 6.86%)</title><rect x="51.4956%" y="165" width="6.8622%" height="15" fill="rgb(242,16,51)"/><text x="51.7456%" y="175.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`szone_malloc (1 samples, 0.06%)</title><rect x="58.2991%" y="149" width="0.0587%" height="15" fill="rgb(248,9,4)"/><text x="58.5491%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="58.3578%" y="165" width="0.0587%" height="15" fill="rgb(210,31,22)"/><text x="58.6078%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="58.4164%" y="165" width="0.0587%" height="15" fill="rgb(239,54,39)"/><text x="58.6664%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="58.4751%" y="165" width="0.0587%" height="15" fill="rgb(230,99,41)"/><text x="58.7251%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.18%)</title><rect x="58.5337%" y="165" width="0.1760%" height="15" fill="rgb(253,106,12)"/><text x="58.7837%" y="175.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (20 samples, 1.17%)</title><rect x="58.7097%" y="165" width="1.1730%" height="15" fill="rgb(213,46,41)"/><text x="58.9597%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.06%)</title><rect x="60.9384%" y="133" width="0.0587%" height="15" fill="rgb(215,133,35)"/><text x="61.1884%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="60.9384%" y="117" width="0.0587%" height="15" fill="rgb(213,28,5)"/><text x="61.1884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="60.9384%" y="101" width="0.0587%" height="15" fill="rgb(215,77,49)"/><text x="61.1884%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.12%)</title><rect x="60.9384%" y="149" width="0.1173%" height="15" fill="rgb(248,100,22)"/><text x="61.1884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="60.9971%" y="133" width="0.0587%" height="15" fill="rgb(208,67,9)"/><text x="61.2471%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="61.0557%" y="149" width="0.0587%" height="15" fill="rgb(219,133,21)"/><text x="61.3057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.06%)</title><rect x="62.2874%" y="117" width="0.0587%" height="15" fill="rgb(246,46,29)"/><text x="62.5374%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.23%)</title><rect x="62.3460%" y="117" width="0.2346%" height="15" fill="rgb(246,185,52)"/><text x="62.5960%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (13 samples, 0.76%)</title><rect x="62.5806%" y="117" width="0.7625%" height="15" fill="rgb(252,136,11)"/><text x="62.8306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.12%)</title><rect x="63.3431%" y="117" width="0.1173%" height="15" fill="rgb(219,138,53)"/><text x="63.5931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="63.4604%" y="117" width="0.0587%" height="15" fill="rgb(211,51,23)"/><text x="63.7104%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.88%)</title><rect x="68.3871%" y="69" width="0.8798%" height="15" fill="rgb(247,221,28)"/><text x="68.6371%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (82 samples, 4.81%)</title><rect x="64.6921%" y="101" width="4.8094%" height="15" fill="rgb(251,222,45)"/><text x="64.9421%" y="111.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 2.99%)</title><rect x="66.5103%" y="85" width="2.9912%" height="15" fill="rgb(217,162,53)"/><text x="66.7603%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.23%)</title><rect x="69.2669%" y="69" width="0.2346%" height="15" fill="rgb(229,93,14)"/><text x="69.5169%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="69.5015%" y="101" width="0.0587%" height="15" fill="rgb(209,67,49)"/><text x="69.7515%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.59%)</title><rect x="72.6100%" y="69" width="0.5865%" height="15" fill="rgb(213,87,29)"/><text x="72.8600%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="73.1965%" y="69" width="0.1173%" height="15" fill="rgb(205,151,52)"/><text x="73.4465%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (86 samples, 5.04%)</title><rect x="69.5601%" y="101" width="5.0440%" height="15" fill="rgb(253,215,39)"/><text x="69.8101%" y="111.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (82 samples, 4.81%)</title><rect x="69.7947%" y="85" width="4.8094%" height="15" fill="rgb(221,220,41)"/><text x="70.0447%" y="95.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 1.29%)</title><rect x="73.3138%" y="69" width="1.2903%" height="15" fill="rgb(218,133,21)"/><text x="73.5638%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.29%)</title><rect x="74.3109%" y="53" width="0.2933%" height="15" fill="rgb(221,193,43)"/><text x="74.5609%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 1.06%)</title><rect x="74.6041%" y="101" width="1.0557%" height="15" fill="rgb(240,128,52)"/><text x="74.8541%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.82%)</title><rect x="74.8387%" y="85" width="0.8211%" height="15" fill="rgb(253,114,12)"/><text x="75.0887%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="75.6598%" y="101" width="0.1760%" height="15" fill="rgb(215,223,47)"/><text x="75.9098%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="77.3021%" y="85" width="0.0587%" height="15" fill="rgb(248,225,23)"/><text x="77.5521%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (29 samples, 1.70%)</title><rect x="75.8358%" y="101" width="1.7009%" height="15" fill="rgb(250,108,0)"/><text x="76.0858%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.18%)</title><rect x="77.3607%" y="85" width="0.1760%" height="15" fill="rgb(228,208,7)"/><text x="77.6107%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (240 samples, 14.08%)</title><rect x="63.5191%" y="117" width="14.0762%" height="15" fill="rgb(244,45,10)"/><text x="63.7691%" y="127.50">libsystem_malloc.dyli..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="77.5367%" y="101" width="0.0587%" height="15" fill="rgb(207,125,25)"/><text x="77.7867%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (270 samples, 15.84%)</title><rect x="61.8182%" y="133" width="15.8358%" height="15" fill="rgb(210,195,18)"/><text x="62.0682%" y="143.50">libsystem_malloc.dylib`m..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="77.5953%" y="117" width="0.0587%" height="15" fill="rgb(249,80,12)"/><text x="77.8453%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 1.00%)</title><rect x="77.6540%" y="133" width="0.9971%" height="15" fill="rgb(221,65,9)"/><text x="77.9040%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 1.00%)</title><rect x="77.6540%" y="117" width="0.9971%" height="15" fill="rgb(235,49,36)"/><text x="77.9040%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (300 samples, 17.60%)</title><rect x="61.1144%" y="149" width="17.5953%" height="15" fill="rgb(225,32,20)"/><text x="61.3644%" y="159.50">libsystem_malloc.dylib`real..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="78.6510%" y="133" width="0.0587%" height="15" fill="rgb(215,141,46)"/><text x="78.9010%" y="143.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (324 samples, 19.00%)</title><rect x="59.8827%" y="165" width="19.0029%" height="15" fill="rgb(250,160,47)"/><text x="60.1327%" y="175.50">prof`alloc::raw_vec::RawVec&lt;T,..</text></g><g><title>prof`__rdl_realloc (3 samples, 0.18%)</title><rect x="78.7097%" y="149" width="0.1760%" height="15" fill="rgb(216,222,40)"/><text x="78.9597%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.12%)</title><rect x="85.2199%" y="149" width="0.1173%" height="15" fill="rgb(234,217,39)"/><text x="85.4699%" y="159.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (33 samples, 1.94%)</title><rect x="85.3372%" y="149" width="1.9355%" height="15" fill="rgb(207,178,40)"/><text x="85.5872%" y="159.50">p..</text></g><g><title>prof`__rdl_alloc (1 samples, 0.06%)</title><rect x="87.2727%" y="149" width="0.0587%" height="15" fill="rgb(221,136,13)"/><text x="87.5227%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.12%)</title><rect x="89.0323%" y="117" width="0.1173%" height="15" fill="rgb(249,199,10)"/><text x="89.2823%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.23%)</title><rect x="89.3255%" y="101" width="0.2346%" height="15" fill="rgb(249,222,13)"/><text x="89.5755%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 1.00%)</title><rect x="95.6012%" y="69" width="0.9971%" height="15" fill="rgb(244,185,38)"/><text x="95.8512%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (146 samples, 8.56%)</title><rect x="89.5601%" y="101" width="8.5630%" height="15" fill="rgb(236,202,9)"/><text x="89.8101%" y="111.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (136 samples, 7.98%)</title><rect x="90.1466%" y="85" width="7.9765%" height="15" fill="rgb(250,229,37)"/><text x="90.3966%" y="95.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 1.52%)</title><rect x="96.5982%" y="69" width="1.5249%" height="15" fill="rgb(206,174,23)"/><text x="96.8482%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.53%)</title><rect x="97.5953%" y="53" width="0.5279%" height="15" fill="rgb(211,33,43)"/><text x="97.8453%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (154 samples, 9.03%)</title><rect x="89.1496%" y="117" width="9.0323%" height="15" fill="rgb(245,58,50)"/><text x="89.3996%" y="127.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="98.1232%" y="101" width="0.0587%" height="15" fill="rgb(244,68,36)"/><text x="98.3732%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (166 samples, 9.74%)</title><rect x="88.5630%" y="133" width="9.7361%" height="15" fill="rgb(232,229,15)"/><text x="88.8130%" y="143.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="98.1818%" y="117" width="0.1173%" height="15" fill="rgb(254,30,23)"/><text x="98.4318%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.18%)</title><rect x="98.4751%" y="85" width="0.1760%" height="15" fill="rgb(235,160,14)"/><text x="98.7251%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="98.7683%" y="53" width="0.0587%" height="15" fill="rgb(212,155,44)"/><text x="99.0183%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.53%)</title><rect x="98.6510%" y="85" width="0.5279%" height="15" fill="rgb(226,2,50)"/><text x="98.9010%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.53%)</title><rect x="98.6510%" y="69" width="0.5279%" height="15" fill="rgb(234,177,6)"/><text x="98.9010%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.35%)</title><rect x="98.8270%" y="53" width="0.3519%" height="15" fill="rgb(217,24,9)"/><text x="99.0770%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.18%)</title><rect x="99.0029%" y="37" width="0.1760%" height="15" fill="rgb(220,13,46)"/><text x="99.2529%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="99.1789%" y="85" width="0.0587%" height="15" fill="rgb(239,221,27)"/><text x="99.4289%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="99.4721%" y="69" width="0.0587%" height="15" fill="rgb(222,198,25)"/><text x="99.7221%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 1.29%)</title><rect x="98.2991%" y="117" width="1.2903%" height="15" fill="rgb(211,99,13)"/><text x="98.5491%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (21 samples, 1.23%)</title><rect x="98.3578%" y="101" width="1.2317%" height="15" fill="rgb(232,111,31)"/><text x="98.6078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.35%)</title><rect x="99.2375%" y="85" width="0.3519%" height="15" fill="rgb(245,82,37)"/><text x="99.4875%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="99.5308%" y="69" width="0.0587%" height="15" fill="rgb(227,149,46)"/><text x="99.7808%" y="79.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (1,025 samples, 60.12%)</title><rect x="39.7067%" y="181" width="60.1173%" height="15" fill="rgb(218,36,50)"/><text x="39.9567%" y="191.50">prof`cress::engine::piece::Piece::all_moves</text></g><g><title>prof`cress::engine::piece::generate_moves (357 samples, 20.94%)</title><rect x="78.8856%" y="165" width="20.9384%" height="15" fill="rgb(226,80,48)"/><text x="79.1356%" y="175.50">prof`cress::engine::piece::genera..</text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (213 samples, 12.49%)</title><rect x="87.3314%" y="149" width="12.4927%" height="15" fill="rgb(238,224,15)"/><text x="87.5814%" y="159.50">prof`alloc::raw_vec..</text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 1.52%)</title><rect x="98.2991%" y="133" width="1.5249%" height="15" fill="rgb(241,136,10)"/><text x="98.5491%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.23%)</title><rect x="99.5894%" y="117" width="0.2346%" height="15" fill="rgb(208,32,45)"/><text x="99.8394%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.23%)</title><rect x="99.5894%" y="101" width="0.2346%" height="15" fill="rgb(207,135,9)"/><text x="99.8394%" y="111.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (1,630 samples, 95.60%)</title><rect x="4.3402%" y="229" width="95.6012%" height="15" fill="rgb(206,86,44)"/><text x="4.5902%" y="239.50">prof`cress::engine::structs::ChessState::generate_all_legal_moves</text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (1,523 samples, 89.33%)</title><rect x="10.6158%" y="213" width="89.3255%" height="15" fill="rgb(245,177,15)"/><text x="10.8658%" y="223.50">prof`cress::engine::structs::ChessState::square_is_attacked</text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (1,478 samples, 86.69%)</title><rect x="13.2551%" y="197" width="86.6862%" height="15" fill="rgb(206,64,50)"/><text x="13.5051%" y="207.50">prof`cress::engine::structs::ChessState::generate_all_pseudo_moves</text></g><g><title>prof`cress::engine::piece::generate_moves (2 samples, 0.12%)</title><rect x="99.8240%" y="181" width="0.1173%" height="15" fill="rgb(234,36,40)"/><text x="100.0740%" y="191.50"></text></g><g><title>all (1,705 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(213,64,8)"/><text x="0.2500%" y="431.50"></text></g><g><title>prof`0x1 (1,705 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(210,75,36)"/><text x="0.2500%" y="415.50">prof`0x1</text></g><g><title>libdyld.dylib`start (1,705 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(229,88,21)"/><text x="0.2500%" y="399.50">libdyld.dylib`start</text></g><g><title>prof`main (1,705 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(252,204,47)"/><text x="0.2500%" y="383.50">prof`main</text></g><g><title>prof`std::rt::lang_start_internal (1,705 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(208,77,27)"/><text x="0.2500%" y="367.50">prof`std::rt::lang_start_internal</text></g><g><title>prof`std::rt::lang_start::_{{closure}} (1,705 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,76,26)"/><text x="0.2500%" y="351.50">prof`std::rt::lang_start::_{{closure}}</text></g><g><title>prof`std::sys_common::backtrace::__rust_begin_short_backtrace (1,705 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(225,139,18)"/><text x="0.2500%" y="335.50">prof`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>prof`prof::main (1,705 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(230,137,11)"/><text x="0.2500%" y="319.50">prof`prof::main</text></g><g><title>prof`prof::generate_moves (1,705 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(212,28,1)"/><text x="0.2500%" y="303.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (1,705 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(248,164,17)"/><text x="0.2500%" y="287.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (1,704 samples, 99.94%)</title><rect x="0.0587%" y="261" width="99.9413%" height="15" fill="rgb(222,171,42)"/><text x="0.3087%" y="271.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (1,638 samples, 96.07%)</title><rect x="3.9296%" y="245" width="96.0704%" height="15" fill="rgb(243,84,45)"/><text x="4.1796%" y="255.50">prof`prof::generate_moves</text></g><g><title>prof`cress::engine::structs::ChessState::make_move_unchecked (1 samples, 0.06%)</title><rect x="99.9413%" y="229" width="0.0587%" height="15" fill="rgb(252,49,23)"/><text x="100.1913%" y="239.50"></text></g></svg></svg>
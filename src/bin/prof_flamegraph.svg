<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>prof`_dyld_private (1 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0326%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="399.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0326%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0326%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`ImageLoaderMachO::usesTwoLevelNameSpace (1 samples, 0.03%)</title><rect x="0.0000%" y="341" width="0.0326%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="351.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (1 samples, 0.03%)</title><rect x="0.0326%" y="309" width="0.0326%" height="15" fill="rgb(208,68,35)"/><text x="0.2826%" y="319.50"></text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (1 samples, 0.03%)</title><rect x="0.0326%" y="293" width="0.0326%" height="15" fill="rgb(232,128,0)"/><text x="0.2826%" y="303.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (1 samples, 0.03%)</title><rect x="0.0326%" y="277" width="0.0326%" height="15" fill="rgb(207,160,47)"/><text x="0.2826%" y="287.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="0.0326%" y="261" width="0.0326%" height="15" fill="rgb(228,23,34)"/><text x="0.2826%" y="271.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.0326%" y="245" width="0.0326%" height="15" fill="rgb(218,30,26)"/><text x="0.2826%" y="255.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.0326%" y="229" width="0.0326%" height="15" fill="rgb(220,122,19)"/><text x="0.2826%" y="239.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.0651%" y="229" width="0.0326%" height="15" fill="rgb(250,228,42)"/><text x="0.3151%" y="239.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="0.0651%" y="213" width="0.0326%" height="15" fill="rgb(240,193,28)"/><text x="0.3151%" y="223.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.10%)</title><rect x="0.0651%" y="245" width="0.0977%" height="15" fill="rgb(216,20,37)"/><text x="0.3151%" y="255.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.07%)</title><rect x="0.0977%" y="229" width="0.0651%" height="15" fill="rgb(206,188,39)"/><text x="0.3477%" y="239.50"></text></g><g><title>prof`hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="0.0977%" y="213" width="0.0651%" height="15" fill="rgb(217,207,13)"/><text x="0.3477%" y="223.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="0.0977%" y="197" width="0.0651%" height="15" fill="rgb(231,73,38)"/><text x="0.3477%" y="207.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="0.1629%" y="229" width="0.0326%" height="15" fill="rgb(225,20,46)"/><text x="0.4129%" y="239.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.1629%" y="213" width="0.0326%" height="15" fill="rgb(210,31,41)"/><text x="0.4129%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="0.1629%" y="197" width="0.0326%" height="15" fill="rgb(221,200,47)"/><text x="0.4129%" y="207.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.1954%" y="213" width="0.0326%" height="15" fill="rgb(226,26,5)"/><text x="0.4454%" y="223.50"></text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (6 samples, 0.20%)</title><rect x="0.0651%" y="277" width="0.1954%" height="15" fill="rgb(249,33,26)"/><text x="0.3151%" y="287.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (6 samples, 0.20%)</title><rect x="0.0651%" y="261" width="0.1954%" height="15" fill="rgb(235,183,28)"/><text x="0.3151%" y="271.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (3 samples, 0.10%)</title><rect x="0.1629%" y="245" width="0.0977%" height="15" fill="rgb(221,5,38)"/><text x="0.4129%" y="255.50"></text></g><g><title>prof`cress::engine::piece::generate_moves (2 samples, 0.07%)</title><rect x="0.1954%" y="229" width="0.0651%" height="15" fill="rgb(247,18,42)"/><text x="0.4454%" y="239.50"></text></g><g><title>prof`std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.03%)</title><rect x="0.2280%" y="213" width="0.0326%" height="15" fill="rgb(241,131,45)"/><text x="0.4780%" y="223.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (7 samples, 0.23%)</title><rect x="0.0651%" y="293" width="0.2280%" height="15" fill="rgb(249,31,29)"/><text x="0.3151%" y="303.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.2606%" y="277" width="0.0326%" height="15" fill="rgb(225,111,53)"/><text x="0.5106%" y="287.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.03%)</title><rect x="0.2606%" y="261" width="0.0326%" height="15" fill="rgb(238,160,17)"/><text x="0.5106%" y="271.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="0.2606%" y="245" width="0.0326%" height="15" fill="rgb(214,148,48)"/><text x="0.5106%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="0.3257%" y="213" width="0.0326%" height="15" fill="rgb(232,36,49)"/><text x="0.5757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="0.3257%" y="197" width="0.0326%" height="15" fill="rgb(209,103,24)"/><text x="0.5757%" y="207.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.07%)</title><rect x="0.3257%" y="245" width="0.0651%" height="15" fill="rgb(229,88,8)"/><text x="0.5757%" y="255.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="0.3257%" y="229" width="0.0651%" height="15" fill="rgb(213,181,19)"/><text x="0.5757%" y="239.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.3583%" y="213" width="0.0326%" height="15" fill="rgb(254,191,54)"/><text x="0.6083%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.03%)</title><rect x="0.3583%" y="197" width="0.0326%" height="15" fill="rgb(241,83,37)"/><text x="0.6083%" y="207.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="0.3909%" y="229" width="0.0326%" height="15" fill="rgb(233,36,39)"/><text x="0.6409%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="0.3909%" y="213" width="0.0326%" height="15" fill="rgb(226,3,54)"/><text x="0.6409%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="0.3909%" y="197" width="0.0326%" height="15" fill="rgb(245,192,40)"/><text x="0.6409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="0.3909%" y="181" width="0.0326%" height="15" fill="rgb(238,167,29)"/><text x="0.6409%" y="191.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (4 samples, 0.13%)</title><rect x="0.3257%" y="261" width="0.1303%" height="15" fill="rgb(232,182,51)"/><text x="0.5757%" y="271.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (2 samples, 0.07%)</title><rect x="0.3909%" y="245" width="0.0651%" height="15" fill="rgb(231,60,39)"/><text x="0.6409%" y="255.50"></text></g><g><title>prof`cress::engine::piece::generate_moves (1 samples, 0.03%)</title><rect x="0.4235%" y="229" width="0.0326%" height="15" fill="rgb(208,69,12)"/><text x="0.6735%" y="239.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="0.4235%" y="213" width="0.0326%" height="15" fill="rgb(235,93,37)"/><text x="0.6735%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.03%)</title><rect x="0.4235%" y="197" width="0.0326%" height="15" fill="rgb(213,116,39)"/><text x="0.6735%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="0.4235%" y="181" width="0.0326%" height="15" fill="rgb(222,207,29)"/><text x="0.6735%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="0.4235%" y="165" width="0.0326%" height="15" fill="rgb(206,96,30)"/><text x="0.6735%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="0.4235%" y="149" width="0.0326%" height="15" fill="rgb(218,138,4)"/><text x="0.6735%" y="159.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.4560%" y="245" width="0.0326%" height="15" fill="rgb(250,191,14)"/><text x="0.7060%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="0.5863%" y="197" width="0.0326%" height="15" fill="rgb(239,60,40)"/><text x="0.8363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.13%)</title><rect x="0.6189%" y="197" width="0.1303%" height="15" fill="rgb(206,27,48)"/><text x="0.8689%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.10%)</title><rect x="0.6515%" y="181" width="0.0977%" height="15" fill="rgb(225,35,8)"/><text x="0.9015%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.07%)</title><rect x="0.6840%" y="165" width="0.0651%" height="15" fill="rgb(250,213,24)"/><text x="0.9340%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.13%)</title><rect x="0.7492%" y="197" width="0.1303%" height="15" fill="rgb(247,123,22)"/><text x="0.9992%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.10%)</title><rect x="0.7818%" y="181" width="0.0977%" height="15" fill="rgb(231,138,38)"/><text x="1.0318%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="0.8795%" y="197" width="0.0651%" height="15" fill="rgb(231,145,46)"/><text x="1.1295%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.26%)</title><rect x="1.0423%" y="181" width="0.2606%" height="15" fill="rgb(251,118,11)"/><text x="1.2923%" y="191.50"></text></g><g><title>prof`hashbrown::map::make_hash (4 samples, 0.13%)</title><rect x="1.4658%" y="149" width="0.1303%" height="15" fill="rgb(217,147,25)"/><text x="1.7158%" y="159.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="1.4984%" y="133" width="0.0977%" height="15" fill="rgb(247,81,37)"/><text x="1.7484%" y="143.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 1.04%)</title><rect x="0.5863%" y="213" width="1.0423%" height="15" fill="rgb(209,12,38)"/><text x="0.8363%" y="223.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (21 samples, 0.68%)</title><rect x="0.9446%" y="197" width="0.6840%" height="15" fill="rgb(227,1,9)"/><text x="1.1946%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (10 samples, 0.33%)</title><rect x="1.3029%" y="181" width="0.3257%" height="15" fill="rgb(248,47,43)"/><text x="1.5529%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (7 samples, 0.23%)</title><rect x="1.4007%" y="165" width="0.2280%" height="15" fill="rgb(221,10,30)"/><text x="1.6507%" y="175.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="1.5961%" y="149" width="0.0326%" height="15" fill="rgb(210,229,1)"/><text x="1.8461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="1.5961%" y="133" width="0.0326%" height="15" fill="rgb(222,148,37)"/><text x="1.8461%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1.5961%" y="117" width="0.0326%" height="15" fill="rgb(234,67,33)"/><text x="1.8461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="1.5961%" y="101" width="0.0326%" height="15" fill="rgb(247,98,35)"/><text x="1.8461%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.07%)</title><rect x="1.6612%" y="197" width="0.0651%" height="15" fill="rgb(247,138,52)"/><text x="1.9112%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.07%)</title><rect x="1.6612%" y="181" width="0.0651%" height="15" fill="rgb(213,79,30)"/><text x="1.9112%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="1.6938%" y="165" width="0.0326%" height="15" fill="rgb(246,177,23)"/><text x="1.9438%" y="175.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="1.7264%" y="197" width="0.0326%" height="15" fill="rgb(230,62,27)"/><text x="1.9764%" y="207.50"></text></g><g><title>prof`hashbrown::map::make_hash (5 samples, 0.16%)</title><rect x="1.7590%" y="197" width="0.1629%" height="15" fill="rgb(216,154,8)"/><text x="2.0090%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="1.8567%" y="181" width="0.0651%" height="15" fill="rgb(244,35,45)"/><text x="2.1067%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="2.0195%" y="117" width="0.0326%" height="15" fill="rgb(251,115,12)"/><text x="2.2695%" y="127.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (47 samples, 1.53%)</title><rect x="0.5537%" y="229" width="1.5309%" height="15" fill="rgb(240,54,50)"/><text x="0.8037%" y="239.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (14 samples, 0.46%)</title><rect x="1.6287%" y="213" width="0.4560%" height="15" fill="rgb(233,84,52)"/><text x="1.8787%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (5 samples, 0.16%)</title><rect x="1.9218%" y="197" width="0.1629%" height="15" fill="rgb(207,117,47)"/><text x="2.1718%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.16%)</title><rect x="1.9218%" y="181" width="0.1629%" height="15" fill="rgb(249,43,39)"/><text x="2.1718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.16%)</title><rect x="1.9218%" y="165" width="0.1629%" height="15" fill="rgb(209,38,44)"/><text x="2.1718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.16%)</title><rect x="1.9218%" y="149" width="0.1629%" height="15" fill="rgb(236,212,23)"/><text x="2.1718%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.13%)</title><rect x="1.9544%" y="133" width="0.1303%" height="15" fill="rgb(242,79,21)"/><text x="2.2044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="2.0521%" y="117" width="0.0326%" height="15" fill="rgb(211,96,35)"/><text x="2.3021%" y="127.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.10%)</title><rect x="2.0847%" y="229" width="0.0977%" height="15" fill="rgb(253,215,40)"/><text x="2.3347%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.10%)</title><rect x="2.4430%" y="181" width="0.0977%" height="15" fill="rgb(211,81,21)"/><text x="2.6930%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.20%)</title><rect x="2.3779%" y="213" width="0.1954%" height="15" fill="rgb(208,190,38)"/><text x="2.6279%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.16%)</title><rect x="2.4104%" y="197" width="0.1629%" height="15" fill="rgb(235,213,38)"/><text x="2.6604%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="2.5407%" y="181" width="0.0326%" height="15" fill="rgb(237,122,38)"/><text x="2.7907%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.16%)</title><rect x="2.5733%" y="213" width="0.1629%" height="15" fill="rgb(244,218,35)"/><text x="2.8233%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.16%)</title><rect x="2.5733%" y="197" width="0.1629%" height="15" fill="rgb(240,68,47)"/><text x="2.8233%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.13%)</title><rect x="2.6059%" y="181" width="0.1303%" height="15" fill="rgb(210,16,53)"/><text x="2.8559%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.10%)</title><rect x="2.6384%" y="165" width="0.0977%" height="15" fill="rgb(235,124,12)"/><text x="2.8884%" y="175.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.10%)</title><rect x="2.7362%" y="213" width="0.0977%" height="15" fill="rgb(224,169,11)"/><text x="2.9862%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="2.8664%" y="149" width="0.0326%" height="15" fill="rgb(250,166,2)"/><text x="3.1164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.8990%" y="149" width="0.0326%" height="15" fill="rgb(242,216,29)"/><text x="3.1490%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.8990%" y="133" width="0.0326%" height="15" fill="rgb(230,116,27)"/><text x="3.1490%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="2.9316%" y="149" width="0.0326%" height="15" fill="rgb(228,99,48)"/><text x="3.1816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="2.9316%" y="133" width="0.0326%" height="15" fill="rgb(253,11,6)"/><text x="3.1816%" y="143.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.33%)</title><rect x="2.8339%" y="213" width="0.3257%" height="15" fill="rgb(247,143,39)"/><text x="3.0839%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.29%)</title><rect x="2.8664%" y="197" width="0.2932%" height="15" fill="rgb(236,97,10)"/><text x="3.1164%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.29%)</title><rect x="2.8664%" y="181" width="0.2932%" height="15" fill="rgb(233,208,19)"/><text x="3.1164%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.29%)</title><rect x="2.8664%" y="165" width="0.2932%" height="15" fill="rgb(216,164,2)"/><text x="3.1164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.20%)</title><rect x="2.9642%" y="149" width="0.1954%" height="15" fill="rgb(220,129,5)"/><text x="3.2142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="3.1270%" y="133" width="0.0326%" height="15" fill="rgb(242,17,10)"/><text x="3.3770%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (1 samples, 0.03%)</title><rect x="3.2899%" y="197" width="0.0326%" height="15" fill="rgb(242,107,0)"/><text x="3.5399%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.33%)</title><rect x="3.5831%" y="181" width="0.3257%" height="15" fill="rgb(251,28,31)"/><text x="3.8331%" y="191.50"></text></g><g><title>prof`DYLD-STUB$$memset (2 samples, 0.07%)</title><rect x="4.1042%" y="149" width="0.0651%" height="15" fill="rgb(233,223,10)"/><text x="4.3542%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="4.3322%" y="69" width="0.0326%" height="15" fill="rgb(215,21,27)"/><text x="4.5822%" y="79.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (33 samples, 1.07%)</title><rect x="3.3225%" y="197" width="1.0749%" height="15" fill="rgb(232,23,21)"/><text x="3.5725%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (15 samples, 0.49%)</title><rect x="3.9088%" y="181" width="0.4886%" height="15" fill="rgb(244,5,23)"/><text x="4.1588%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (11 samples, 0.36%)</title><rect x="4.0391%" y="165" width="0.3583%" height="15" fill="rgb(226,81,46)"/><text x="4.2891%" y="175.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (7 samples, 0.23%)</title><rect x="4.1694%" y="149" width="0.2280%" height="15" fill="rgb(247,70,30)"/><text x="4.4194%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.20%)</title><rect x="4.2020%" y="133" width="0.1954%" height="15" fill="rgb(212,68,19)"/><text x="4.4520%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.20%)</title><rect x="4.2020%" y="117" width="0.1954%" height="15" fill="rgb(240,187,13)"/><text x="4.4520%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.16%)</title><rect x="4.2345%" y="101" width="0.1629%" height="15" fill="rgb(223,113,26)"/><text x="4.4845%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.13%)</title><rect x="4.2671%" y="85" width="0.1303%" height="15" fill="rgb(206,192,2)"/><text x="4.5171%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="4.3648%" y="69" width="0.0326%" height="15" fill="rgb(241,108,4)"/><text x="4.6148%" y="79.50"></text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (122 samples, 3.97%)</title><rect x="0.4560%" y="261" width="3.9739%" height="15" fill="rgb(247,173,49)"/><text x="0.7060%" y="271.50">prof..</text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (121 samples, 3.94%)</title><rect x="0.4886%" y="245" width="3.9414%" height="15" fill="rgb(224,114,35)"/><text x="0.7386%" y="255.50">prof..</text></g><g><title>prof`cress::engine::piece::Piece::all_moves (69 samples, 2.25%)</title><rect x="2.1824%" y="229" width="2.2476%" height="15" fill="rgb(245,159,27)"/><text x="2.4324%" y="239.50">p..</text></g><g><title>prof`cress::engine::piece::generate_moves (39 samples, 1.27%)</title><rect x="3.1596%" y="213" width="1.2704%" height="15" fill="rgb(245,172,44)"/><text x="3.4096%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.03%)</title><rect x="4.3974%" y="197" width="0.0326%" height="15" fill="rgb(236,23,11)"/><text x="4.6474%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="4.4300%" y="245" width="0.0326%" height="15" fill="rgb(205,117,38)"/><text x="4.6800%" y="255.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (129 samples, 4.20%)</title><rect x="0.2932%" y="277" width="4.2020%" height="15" fill="rgb(237,72,25)"/><text x="0.5432%" y="287.50">prof`..</text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.07%)</title><rect x="4.4300%" y="261" width="0.0651%" height="15" fill="rgb(244,70,9)"/><text x="4.6800%" y="271.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.03%)</title><rect x="4.4625%" y="245" width="0.0326%" height="15" fill="rgb(217,125,39)"/><text x="4.7125%" y="255.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="4.4625%" y="229" width="0.0326%" height="15" fill="rgb(235,36,10)"/><text x="4.7125%" y="239.50"></text></g><g><title>prof`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="4.4625%" y="213" width="0.0326%" height="15" fill="rgb(251,123,47)"/><text x="4.7125%" y="223.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="4.4625%" y="197" width="0.0326%" height="15" fill="rgb(221,13,13)"/><text x="4.7125%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="4.4951%" y="261" width="0.0326%" height="15" fill="rgb(238,131,9)"/><text x="4.7451%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="4.4951%" y="245" width="0.0326%" height="15" fill="rgb(211,50,8)"/><text x="4.7451%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="4.4951%" y="229" width="0.0326%" height="15" fill="rgb(245,182,24)"/><text x="4.7451%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="4.5277%" y="261" width="0.0651%" height="15" fill="rgb(242,14,37)"/><text x="4.7777%" y="271.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="4.5928%" y="261" width="0.0977%" height="15" fill="rgb(246,228,12)"/><text x="4.8428%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.07%)</title><rect x="5.6678%" y="245" width="0.0651%" height="15" fill="rgb(213,55,15)"/><text x="5.9178%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="5.7329%" y="245" width="0.0326%" height="15" fill="rgb(209,9,3)"/><text x="5.9829%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="5.7329%" y="229" width="0.0326%" height="15" fill="rgb(230,59,30)"/><text x="5.9829%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="5.7329%" y="213" width="0.0326%" height="15" fill="rgb(209,121,21)"/><text x="5.9829%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.13%)</title><rect x="5.7655%" y="245" width="0.1303%" height="15" fill="rgb(220,109,13)"/><text x="6.0155%" y="255.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.8958%" y="245" width="0.0326%" height="15" fill="rgb(232,18,1)"/><text x="6.1458%" y="255.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.9283%" y="245" width="0.0326%" height="15" fill="rgb(215,41,42)"/><text x="6.1783%" y="255.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="5.9609%" y="245" width="0.0326%" height="15" fill="rgb(224,123,36)"/><text x="6.2109%" y="255.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (1 samples, 0.03%)</title><rect x="5.9935%" y="229" width="0.0326%" height="15" fill="rgb(240,125,3)"/><text x="6.2435%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.10%)</title><rect x="6.0261%" y="197" width="0.0977%" height="15" fill="rgb(205,98,50)"/><text x="6.2761%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.10%)</title><rect x="6.0261%" y="181" width="0.0977%" height="15" fill="rgb(205,185,37)"/><text x="6.2761%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.10%)</title><rect x="6.0261%" y="165" width="0.0977%" height="15" fill="rgb(238,207,15)"/><text x="6.2761%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.16%)</title><rect x="6.1238%" y="197" width="0.1629%" height="15" fill="rgb(213,199,42)"/><text x="6.3738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.16%)</title><rect x="6.1238%" y="181" width="0.1629%" height="15" fill="rgb(235,201,11)"/><text x="6.3738%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.13%)</title><rect x="6.1564%" y="165" width="0.1303%" height="15" fill="rgb(207,46,11)"/><text x="6.4064%" y="175.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="6.2866%" y="197" width="0.0651%" height="15" fill="rgb(241,35,35)"/><text x="6.5366%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="6.3518%" y="197" width="0.0326%" height="15" fill="rgb(243,32,47)"/><text x="6.6018%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.23%)</title><rect x="6.4821%" y="181" width="0.2280%" height="15" fill="rgb(247,202,23)"/><text x="6.7321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="6.7752%" y="149" width="0.0326%" height="15" fill="rgb(219,102,11)"/><text x="7.0252%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="6.7752%" y="133" width="0.0326%" height="15" fill="rgb(243,110,44)"/><text x="7.0252%" y="143.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="6.8078%" y="149" width="0.0326%" height="15" fill="rgb(222,74,54)"/><text x="7.0578%" y="159.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28 samples, 0.91%)</title><rect x="6.0261%" y="213" width="0.9121%" height="15" fill="rgb(216,99,12)"/><text x="6.2761%" y="223.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (17 samples, 0.55%)</title><rect x="6.3844%" y="197" width="0.5537%" height="15" fill="rgb(226,22,26)"/><text x="6.6344%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (7 samples, 0.23%)</title><rect x="6.7101%" y="181" width="0.2280%" height="15" fill="rgb(217,163,10)"/><text x="6.9601%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (7 samples, 0.23%)</title><rect x="6.7101%" y="165" width="0.2280%" height="15" fill="rgb(213,25,53)"/><text x="6.9601%" y="175.50"></text></g><g><title>prof`hashbrown::map::make_hash (3 samples, 0.10%)</title><rect x="6.8404%" y="149" width="0.0977%" height="15" fill="rgb(252,105,26)"/><text x="7.0904%" y="159.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="6.8730%" y="133" width="0.0651%" height="15" fill="rgb(220,39,43)"/><text x="7.1230%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="7.0033%" y="197" width="0.0326%" height="15" fill="rgb(229,68,48)"/><text x="7.2533%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="7.0358%" y="197" width="0.0326%" height="15" fill="rgb(252,8,32)"/><text x="7.2858%" y="207.50"></text></g><g><title>prof`hashbrown::map::make_hash (5 samples, 0.16%)</title><rect x="7.0684%" y="197" width="0.1629%" height="15" fill="rgb(223,20,43)"/><text x="7.3184%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="7.1336%" y="181" width="0.0977%" height="15" fill="rgb(229,81,49)"/><text x="7.3836%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="7.2313%" y="117" width="0.0326%" height="15" fill="rgb(236,28,36)"/><text x="7.4813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.07%)</title><rect x="7.2313%" y="181" width="0.0651%" height="15" fill="rgb(249,185,26)"/><text x="7.4813%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.07%)</title><rect x="7.2313%" y="165" width="0.0651%" height="15" fill="rgb(249,174,33)"/><text x="7.4813%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="7.2313%" y="149" width="0.0651%" height="15" fill="rgb(233,201,37)"/><text x="7.4813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.07%)</title><rect x="7.2313%" y="133" width="0.0651%" height="15" fill="rgb(221,78,26)"/><text x="7.4813%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="7.2638%" y="117" width="0.0326%" height="15" fill="rgb(250,127,30)"/><text x="7.5138%" y="127.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (40 samples, 1.30%)</title><rect x="6.0261%" y="229" width="1.3029%" height="15" fill="rgb(230,49,44)"/><text x="6.2761%" y="239.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (12 samples, 0.39%)</title><rect x="6.9381%" y="213" width="0.3909%" height="15" fill="rgb(229,67,23)"/><text x="7.1881%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (3 samples, 0.10%)</title><rect x="7.2313%" y="197" width="0.0977%" height="15" fill="rgb(249,83,47)"/><text x="7.4813%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="7.2964%" y="181" width="0.0326%" height="15" fill="rgb(215,43,3)"/><text x="7.5464%" y="191.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="7.3290%" y="229" width="0.0326%" height="15" fill="rgb(238,154,13)"/><text x="7.5790%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="7.6221%" y="213" width="0.0326%" height="15" fill="rgb(219,56,2)"/><text x="7.8721%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="7.6547%" y="213" width="0.0326%" height="15" fill="rgb(233,0,4)"/><text x="7.9047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.20%)</title><rect x="7.6873%" y="213" width="0.1954%" height="15" fill="rgb(235,30,7)"/><text x="7.9373%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.10%)</title><rect x="7.7850%" y="197" width="0.0977%" height="15" fill="rgb(250,79,13)"/><text x="8.0350%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.10%)</title><rect x="7.8827%" y="213" width="0.0977%" height="15" fill="rgb(211,146,34)"/><text x="8.1327%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.10%)</title><rect x="7.8827%" y="197" width="0.0977%" height="15" fill="rgb(228,22,38)"/><text x="8.1327%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.10%)</title><rect x="7.8827%" y="181" width="0.0977%" height="15" fill="rgb(235,168,5)"/><text x="8.1327%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.10%)</title><rect x="7.8827%" y="165" width="0.0977%" height="15" fill="rgb(221,155,16)"/><text x="8.1327%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="7.8827%" y="149" width="0.0977%" height="15" fill="rgb(215,215,53)"/><text x="8.1327%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="7.9479%" y="133" width="0.0326%" height="15" fill="rgb(223,4,10)"/><text x="8.1979%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (1 samples, 0.03%)</title><rect x="7.9805%" y="213" width="0.0326%" height="15" fill="rgb(234,103,6)"/><text x="8.2305%" y="223.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.07%)</title><rect x="8.0130%" y="213" width="0.0651%" height="15" fill="rgb(227,97,0)"/><text x="8.2630%" y="223.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="8.0456%" y="197" width="0.0326%" height="15" fill="rgb(234,150,53)"/><text x="8.2956%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="8.1759%" y="149" width="0.0326%" height="15" fill="rgb(228,201,54)"/><text x="8.4259%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="8.2085%" y="149" width="0.0326%" height="15" fill="rgb(222,22,37)"/><text x="8.4585%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="8.2085%" y="133" width="0.0326%" height="15" fill="rgb(237,53,32)"/><text x="8.4585%" y="143.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.23%)</title><rect x="8.0782%" y="213" width="0.2280%" height="15" fill="rgb(233,25,53)"/><text x="8.3282%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.23%)</title><rect x="8.0782%" y="197" width="0.2280%" height="15" fill="rgb(210,40,34)"/><text x="8.3282%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.23%)</title><rect x="8.0782%" y="181" width="0.2280%" height="15" fill="rgb(241,220,44)"/><text x="8.3282%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.23%)</title><rect x="8.0782%" y="165" width="0.2280%" height="15" fill="rgb(235,28,35)"/><text x="8.3282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.07%)</title><rect x="8.2410%" y="149" width="0.0651%" height="15" fill="rgb(210,56,17)"/><text x="8.4910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="8.2736%" y="133" width="0.0326%" height="15" fill="rgb(224,130,29)"/><text x="8.5236%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (2 samples, 0.07%)</title><rect x="8.5342%" y="197" width="0.0651%" height="15" fill="rgb(235,212,8)"/><text x="8.7842%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="8.8274%" y="181" width="0.1303%" height="15" fill="rgb(223,33,50)"/><text x="9.0774%" y="191.50"></text></g><g><title>prof`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="8.9902%" y="149" width="0.0326%" height="15" fill="rgb(219,149,13)"/><text x="9.2402%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.07%)</title><rect x="9.2182%" y="69" width="0.0651%" height="15" fill="rgb(250,156,29)"/><text x="9.4682%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.29%)</title><rect x="9.0554%" y="133" width="0.2932%" height="15" fill="rgb(216,193,19)"/><text x="9.3054%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (9 samples, 0.29%)</title><rect x="9.0554%" y="117" width="0.2932%" height="15" fill="rgb(216,135,14)"/><text x="9.3054%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.29%)</title><rect x="9.0554%" y="101" width="0.2932%" height="15" fill="rgb(241,47,5)"/><text x="9.3054%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.29%)</title><rect x="9.0554%" y="85" width="0.2932%" height="15" fill="rgb(233,42,35)"/><text x="9.3054%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="9.2834%" y="69" width="0.0651%" height="15" fill="rgb(231,13,6)"/><text x="9.5334%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="9.3160%" y="53" width="0.0326%" height="15" fill="rgb(207,181,40)"/><text x="9.5660%" y="63.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (62 samples, 2.02%)</title><rect x="7.3616%" y="229" width="2.0195%" height="15" fill="rgb(254,173,49)"/><text x="7.6116%" y="239.50">p..</text></g><g><title>prof`cress::engine::piece::generate_moves (33 samples, 1.07%)</title><rect x="8.3062%" y="213" width="1.0749%" height="15" fill="rgb(221,1,38)"/><text x="8.5562%" y="223.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (24 samples, 0.78%)</title><rect x="8.5993%" y="197" width="0.7818%" height="15" fill="rgb(206,124,46)"/><text x="8.8493%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (13 samples, 0.42%)</title><rect x="8.9577%" y="181" width="0.4235%" height="15" fill="rgb(249,21,11)"/><text x="9.2077%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (12 samples, 0.39%)</title><rect x="8.9902%" y="165" width="0.3909%" height="15" fill="rgb(222,201,40)"/><text x="9.2402%" y="175.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (11 samples, 0.36%)</title><rect x="9.0228%" y="149" width="0.3583%" height="15" fill="rgb(235,61,29)"/><text x="9.2728%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="9.3485%" y="133" width="0.0326%" height="15" fill="rgb(219,207,3)"/><text x="9.5985%" y="143.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (105 samples, 3.42%)</title><rect x="5.9935%" y="245" width="3.4202%" height="15" fill="rgb(222,56,46)"/><text x="6.2435%" y="255.50">pro..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="9.3811%" y="229" width="0.0326%" height="15" fill="rgb(239,76,54)"/><text x="9.6311%" y="239.50"></text></g><g><title>prof`cress::engine::structs::ChessState::make_move_unchecked (1 samples, 0.03%)</title><rect x="9.4137%" y="245" width="0.0326%" height="15" fill="rgb(231,124,27)"/><text x="9.6637%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="10.1303%" y="229" width="0.0326%" height="15" fill="rgb(249,195,6)"/><text x="10.3803%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.20%)</title><rect x="10.1629%" y="229" width="0.1954%" height="15" fill="rgb(237,174,47)"/><text x="10.4129%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.10%)</title><rect x="10.2606%" y="213" width="0.0977%" height="15" fill="rgb(206,201,31)"/><text x="10.5106%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.10%)</title><rect x="10.2606%" y="197" width="0.0977%" height="15" fill="rgb(231,57,52)"/><text x="10.5106%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="10.7818%" y="197" width="0.0326%" height="15" fill="rgb(248,177,22)"/><text x="11.0318%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.55%)</title><rect x="10.3583%" y="229" width="0.5537%" height="15" fill="rgb(215,211,37)"/><text x="10.6083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.46%)</title><rect x="10.4560%" y="213" width="0.4560%" height="15" fill="rgb(241,128,51)"/><text x="10.7060%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.10%)</title><rect x="10.8143%" y="197" width="0.0977%" height="15" fill="rgb(227,165,31)"/><text x="11.0643%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="10.9121%" y="229" width="0.0651%" height="15" fill="rgb(228,167,24)"/><text x="11.1621%" y="239.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.13%)</title><rect x="10.9772%" y="229" width="0.1303%" height="15" fill="rgb(228,143,12)"/><text x="11.2272%" y="239.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.81%)</title><rect x="11.1075%" y="229" width="0.8143%" height="15" fill="rgb(249,149,8)"/><text x="11.3575%" y="239.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="11.9218%" y="229" width="0.0326%" height="15" fill="rgb(243,35,44)"/><text x="12.1718%" y="239.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (3 samples, 0.10%)</title><rect x="11.9544%" y="229" width="0.0977%" height="15" fill="rgb(246,89,9)"/><text x="12.2044%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="13.8111%" y="213" width="0.0326%" height="15" fill="rgb(233,213,13)"/><text x="14.0611%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="13.8436%" y="213" width="0.0326%" height="15" fill="rgb(233,141,41)"/><text x="14.0936%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.07%)</title><rect x="13.8762%" y="213" width="0.0651%" height="15" fill="rgb(239,167,4)"/><text x="14.1262%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.13%)</title><rect x="13.9414%" y="213" width="0.1303%" height="15" fill="rgb(209,217,16)"/><text x="14.1914%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="14.0717%" y="213" width="0.0326%" height="15" fill="rgb(219,88,35)"/><text x="14.3217%" y="223.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (5 samples, 0.16%)</title><rect x="14.1042%" y="213" width="0.1629%" height="15" fill="rgb(220,193,23)"/><text x="14.3542%" y="223.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.10%)</title><rect x="14.2671%" y="213" width="0.0977%" height="15" fill="rgb(230,90,52)"/><text x="14.5171%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="15.3420%" y="197" width="0.0326%" height="15" fill="rgb(252,106,19)"/><text x="15.5920%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.10%)</title><rect x="15.3746%" y="197" width="0.0977%" height="15" fill="rgb(206,74,20)"/><text x="15.6246%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.10%)</title><rect x="15.4723%" y="197" width="0.0977%" height="15" fill="rgb(230,138,44)"/><text x="15.7223%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.16%)</title><rect x="16.5472%" y="181" width="0.1629%" height="15" fill="rgb(235,182,43)"/><text x="16.7972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 1.40%)</title><rect x="17.2313%" y="165" width="1.4007%" height="15" fill="rgb(242,16,51)"/><text x="17.4813%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (41 samples, 1.34%)</title><rect x="17.2964%" y="149" width="1.3355%" height="15" fill="rgb(248,9,4)"/><text x="17.5464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 1.99%)</title><rect x="16.7101%" y="181" width="1.9870%" height="15" fill="rgb(210,31,22)"/><text x="16.9601%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.07%)</title><rect x="18.6319%" y="165" width="0.0651%" height="15" fill="rgb(239,54,39)"/><text x="18.8819%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.07%)</title><rect x="20.4235%" y="165" width="0.0651%" height="15" fill="rgb(230,99,41)"/><text x="20.6735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.07%)</title><rect x="20.4886%" y="165" width="0.0651%" height="15" fill="rgb(253,106,12)"/><text x="20.7386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 1.27%)</title><rect x="22.9316%" y="149" width="1.2704%" height="15" fill="rgb(213,46,41)"/><text x="23.1816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (196 samples, 6.38%)</title><rect x="18.6971%" y="181" width="6.3844%" height="15" fill="rgb(215,133,35)"/><text x="18.9471%" y="191.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (139 samples, 4.53%)</title><rect x="20.5537%" y="165" width="4.5277%" height="15" fill="rgb(213,28,5)"/><text x="20.8037%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (27 samples, 0.88%)</title><rect x="24.2020%" y="149" width="0.8795%" height="15" fill="rgb(215,77,49)"/><text x="24.4520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.10%)</title><rect x="25.0814%" y="181" width="0.0977%" height="15" fill="rgb(248,100,22)"/><text x="25.3314%" y="191.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.75%)</title><rect x="25.1792%" y="181" width="0.7492%" height="15" fill="rgb(208,67,9)"/><text x="25.4292%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.36%)</title><rect x="25.9283%" y="181" width="0.3583%" height="15" fill="rgb(219,133,21)"/><text x="26.1783%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (124 samples, 4.04%)</title><rect x="29.8371%" y="165" width="4.0391%" height="15" fill="rgb(246,46,29)"/><text x="30.0871%" y="175.50">prof..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="35.7003%" y="149" width="0.0326%" height="15" fill="rgb(246,185,52)"/><text x="35.9503%" y="159.50"></text></g><g><title>prof`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="35.7329%" y="149" width="0.0326%" height="15" fill="rgb(252,136,11)"/><text x="35.9829%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.07%)</title><rect x="37.2313%" y="133" width="0.0651%" height="15" fill="rgb(219,138,53)"/><text x="37.4813%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.23%)</title><rect x="37.2964%" y="133" width="0.2280%" height="15" fill="rgb(211,51,23)"/><text x="37.5464%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.16%)</title><rect x="37.3616%" y="117" width="0.1629%" height="15" fill="rgb(247,221,28)"/><text x="37.6116%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.16%)</title><rect x="37.3616%" y="101" width="0.1629%" height="15" fill="rgb(251,222,45)"/><text x="37.6116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.13%)</title><rect x="37.7199%" y="101" width="0.1303%" height="15" fill="rgb(217,162,53)"/><text x="37.9699%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.36%)</title><rect x="37.5244%" y="133" width="0.3583%" height="15" fill="rgb(229,93,14)"/><text x="37.7744%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.36%)</title><rect x="37.5244%" y="117" width="0.3583%" height="15" fill="rgb(209,67,49)"/><text x="37.7744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="37.8502%" y="101" width="0.0326%" height="15" fill="rgb(213,87,29)"/><text x="38.1002%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="37.8827%" y="133" width="0.0326%" height="15" fill="rgb(205,151,52)"/><text x="38.1327%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="37.9153%" y="133" width="0.0326%" height="15" fill="rgb(253,215,39)"/><text x="38.1653%" y="143.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.29%)</title><rect x="37.9479%" y="133" width="0.2932%" height="15" fill="rgb(221,220,41)"/><text x="38.1979%" y="143.50"></text></g><g><title>prof`hashbrown::map::make_hash (96 samples, 3.13%)</title><rect x="38.2410%" y="133" width="3.1270%" height="15" fill="rgb(218,133,21)"/><text x="38.4910%" y="143.50">pro..</text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (63 samples, 2.05%)</title><rect x="39.3160%" y="117" width="2.0521%" height="15" fill="rgb(221,193,43)"/><text x="39.5660%" y="127.50">p..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="41.5961%" y="85" width="0.0326%" height="15" fill="rgb(240,128,52)"/><text x="41.8461%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="41.9870%" y="53" width="0.0326%" height="15" fill="rgb(253,114,12)"/><text x="42.2370%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc (27 samples, 0.88%)</title><rect x="41.4984%" y="117" width="0.8795%" height="15" fill="rgb(215,223,47)"/><text x="41.7484%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (26 samples, 0.85%)</title><rect x="41.5309%" y="101" width="0.8469%" height="15" fill="rgb(248,225,23)"/><text x="41.7809%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.75%)</title><rect x="41.6287%" y="85" width="0.7492%" height="15" fill="rgb(250,108,0)"/><text x="41.8787%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.72%)</title><rect x="41.6612%" y="69" width="0.7166%" height="15" fill="rgb(228,208,7)"/><text x="41.9112%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.36%)</title><rect x="42.0195%" y="53" width="0.3583%" height="15" fill="rgb(244,45,10)"/><text x="42.2695%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.16%)</title><rect x="42.2150%" y="37" width="0.1629%" height="15" fill="rgb(207,125,25)"/><text x="42.4650%" y="47.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (262 samples, 8.53%)</title><rect x="33.8762%" y="165" width="8.5342%" height="15" fill="rgb(210,195,18)"/><text x="34.1262%" y="175.50">prof`hashbro..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (204 samples, 6.64%)</title><rect x="35.7655%" y="149" width="6.6450%" height="15" fill="rgb(249,80,12)"/><text x="36.0155%" y="159.50">prof`hash..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (32 samples, 1.04%)</title><rect x="41.3681%" y="133" width="1.0423%" height="15" fill="rgb(221,65,9)"/><text x="41.6181%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="42.3779%" y="117" width="0.0326%" height="15" fill="rgb(235,49,36)"/><text x="42.6279%" y="127.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (496 samples, 16.16%)</title><rect x="26.2866%" y="181" width="16.1564%" height="15" fill="rgb(225,32,20)"/><text x="26.5366%" y="191.50">prof`hashbrown::map::Hash..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="42.4104%" y="165" width="0.0326%" height="15" fill="rgb(215,141,46)"/><text x="42.6604%" y="175.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (831 samples, 27.07%)</title><rect x="15.5700%" y="197" width="27.0684%" height="15" fill="rgb(250,160,47)"/><text x="15.8200%" y="207.50">prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as cor..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (6 samples, 0.20%)</title><rect x="42.4430%" y="181" width="0.1954%" height="15" fill="rgb(216,222,40)"/><text x="42.6930%" y="191.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.20%)</title><rect x="42.6384%" y="197" width="0.1954%" height="15" fill="rgb(234,217,39)"/><text x="42.8884%" y="207.50"></text></g><g><title>prof`__rdl_dealloc (3 samples, 0.10%)</title><rect x="42.8339%" y="197" width="0.0977%" height="15" fill="rgb(207,178,40)"/><text x="43.0839%" y="207.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.20%)</title><rect x="42.9316%" y="197" width="0.1954%" height="15" fill="rgb(221,136,13)"/><text x="43.1816%" y="207.50"></text></g><g><title>prof`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="43.1270%" y="197" width="0.0326%" height="15" fill="rgb(249,199,10)"/><text x="43.3770%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.13%)</title><rect x="44.2997%" y="181" width="0.1303%" height="15" fill="rgb(249,222,13)"/><text x="44.5497%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.36%)</title><rect x="44.4300%" y="181" width="0.3583%" height="15" fill="rgb(244,185,38)"/><text x="44.6800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.29%)</title><rect x="44.4951%" y="165" width="0.2932%" height="15" fill="rgb(236,202,9)"/><text x="44.7451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.29%)</title><rect x="44.4951%" y="149" width="0.2932%" height="15" fill="rgb(250,229,37)"/><text x="44.7451%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.07%)</title><rect x="44.9837%" y="165" width="0.0651%" height="15" fill="rgb(206,174,23)"/><text x="45.2337%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.16%)</title><rect x="45.3746%" y="149" width="0.1629%" height="15" fill="rgb(211,33,43)"/><text x="45.6246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.78%)</title><rect x="44.7883%" y="181" width="0.7818%" height="15" fill="rgb(245,58,50)"/><text x="45.0383%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.52%)</title><rect x="45.0489%" y="165" width="0.5212%" height="15" fill="rgb(244,68,36)"/><text x="45.2989%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="45.5375%" y="149" width="0.0326%" height="15" fill="rgb(232,229,15)"/><text x="45.7875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="45.5700%" y="181" width="0.0326%" height="15" fill="rgb(254,30,23)"/><text x="45.8200%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.39%)</title><rect x="45.6026%" y="181" width="0.3909%" height="15" fill="rgb(235,160,14)"/><text x="45.8526%" y="191.50"></text></g><g><title>prof`DYLD-STUB$$memset (1 samples, 0.03%)</title><rect x="45.9935%" y="181" width="0.0326%" height="15" fill="rgb(212,155,44)"/><text x="46.2435%" y="191.50"></text></g><g><title>prof`hashbrown::map::make_hash (112 samples, 3.65%)</title><rect x="46.0261%" y="181" width="3.6482%" height="15" fill="rgb(226,2,50)"/><text x="46.2761%" y="191.50">prof..</text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (68 samples, 2.21%)</title><rect x="47.4593%" y="165" width="2.2150%" height="15" fill="rgb(234,177,6)"/><text x="47.7093%" y="175.50">p..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.10%)</title><rect x="49.9349%" y="133" width="0.0977%" height="15" fill="rgb(217,24,9)"/><text x="50.1849%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="50.1629%" y="117" width="0.0326%" height="15" fill="rgb(220,13,46)"/><text x="50.4129%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.10%)</title><rect x="50.8795%" y="101" width="0.0977%" height="15" fill="rgb(239,221,27)"/><text x="51.1295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (52 samples, 1.69%)</title><rect x="49.8697%" y="149" width="1.6938%" height="15" fill="rgb(222,198,25)"/><text x="50.1197%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (47 samples, 1.53%)</title><rect x="50.0326%" y="133" width="1.5309%" height="15" fill="rgb(211,99,13)"/><text x="50.2826%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (42 samples, 1.37%)</title><rect x="50.1954%" y="117" width="1.3681%" height="15" fill="rgb(232,111,31)"/><text x="50.4454%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.59%)</title><rect x="50.9772%" y="101" width="0.5863%" height="15" fill="rgb(245,82,37)"/><text x="51.2272%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.23%)</title><rect x="51.3355%" y="85" width="0.2280%" height="15" fill="rgb(227,149,46)"/><text x="51.5855%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (1 samples, 0.03%)</title><rect x="51.5635%" y="149" width="0.0326%" height="15" fill="rgb(218,36,50)"/><text x="51.8135%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (55 samples, 1.79%)</title><rect x="49.8371%" y="165" width="1.7915%" height="15" fill="rgb(226,80,48)"/><text x="50.0871%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="51.5961%" y="149" width="0.0326%" height="15" fill="rgb(238,224,15)"/><text x="51.8461%" y="159.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,147 samples, 37.36%)</title><rect x="14.3648%" y="213" width="37.3616%" height="15" fill="rgb(241,136,10)"/><text x="14.6148%" y="223.50">prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::c..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (263 samples, 8.57%)</title><rect x="43.1596%" y="197" width="8.5668%" height="15" fill="rgb(208,32,45)"/><text x="43.4096%" y="207.50">prof`hashbro..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (63 samples, 2.05%)</title><rect x="49.6743%" y="181" width="2.0521%" height="15" fill="rgb(207,135,9)"/><text x="49.9243%" y="191.50">p..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.10%)</title><rect x="51.6287%" y="165" width="0.0977%" height="15" fill="rgb(206,86,44)"/><text x="51.8787%" y="175.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.81%)</title><rect x="51.7264%" y="213" width="0.8143%" height="15" fill="rgb(245,177,15)"/><text x="51.9764%" y="223.50"></text></g><g><title>prof`__rdl_alloc (3 samples, 0.10%)</title><rect x="52.5407%" y="213" width="0.0977%" height="15" fill="rgb(206,64,50)"/><text x="52.7907%" y="223.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="52.6384%" y="213" width="0.0977%" height="15" fill="rgb(234,36,40)"/><text x="52.8884%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.16%)</title><rect x="55.4072%" y="197" width="0.1629%" height="15" fill="rgb(213,64,8)"/><text x="55.6572%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.36%)</title><rect x="55.5700%" y="197" width="0.3583%" height="15" fill="rgb(210,75,36)"/><text x="55.8200%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.75%)</title><rect x="56.3518%" y="181" width="0.7492%" height="15" fill="rgb(229,88,21)"/><text x="56.6018%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.65%)</title><rect x="56.4495%" y="165" width="0.6515%" height="15" fill="rgb(252,204,47)"/><text x="56.6995%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 1.21%)</title><rect x="55.9283%" y="197" width="1.2052%" height="15" fill="rgb(208,77,27)"/><text x="56.1783%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="57.1010%" y="181" width="0.0326%" height="15" fill="rgb(221,76,26)"/><text x="57.3510%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.46%)</title><rect x="59.3160%" y="165" width="0.4560%" height="15" fill="rgb(225,139,18)"/><text x="59.5660%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (84 samples, 2.74%)</title><rect x="57.1336%" y="197" width="2.7362%" height="15" fill="rgb(230,137,11)"/><text x="57.3836%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (40 samples, 1.30%)</title><rect x="58.5668%" y="181" width="1.3029%" height="15" fill="rgb(212,28,1)"/><text x="58.8168%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.10%)</title><rect x="59.7720%" y="165" width="0.0977%" height="15" fill="rgb(248,164,17)"/><text x="60.0220%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="60.0326%" y="181" width="0.0326%" height="15" fill="rgb(222,171,42)"/><text x="60.2826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.13%)</title><rect x="60.3257%" y="165" width="0.1303%" height="15" fill="rgb(243,84,45)"/><text x="60.5757%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.10%)</title><rect x="62.9642%" y="133" width="0.0977%" height="15" fill="rgb(252,49,23)"/><text x="63.2142%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (120 samples, 3.91%)</title><rect x="60.4560%" y="165" width="3.9088%" height="15" fill="rgb(215,19,7)"/><text x="60.7060%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (116 samples, 3.78%)</title><rect x="60.5863%" y="149" width="3.7785%" height="15" fill="rgb(238,81,41)"/><text x="60.8363%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 1.30%)</title><rect x="63.0619%" y="133" width="1.3029%" height="15" fill="rgb(210,199,37)"/><text x="63.3119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.46%)</title><rect x="63.9088%" y="117" width="0.4560%" height="15" fill="rgb(244,192,49)"/><text x="64.1588%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (133 samples, 4.33%)</title><rect x="60.0651%" y="181" width="4.3322%" height="15" fill="rgb(226,211,11)"/><text x="60.3151%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="64.3648%" y="165" width="0.0326%" height="15" fill="rgb(236,162,54)"/><text x="64.6148%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (141 samples, 4.59%)</title><rect x="59.8697%" y="197" width="4.5928%" height="15" fill="rgb(220,229,9)"/><text x="60.1197%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="64.3974%" y="181" width="0.0651%" height="15" fill="rgb(250,87,22)"/><text x="64.6474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.07%)</title><rect x="64.4625%" y="197" width="0.0651%" height="15" fill="rgb(239,43,17)"/><text x="64.7125%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="64.5277%" y="197" width="0.0326%" height="15" fill="rgb(231,177,25)"/><text x="64.7777%" y="207.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (17 samples, 0.55%)</title><rect x="64.5603%" y="197" width="0.5537%" height="15" fill="rgb(219,179,1)"/><text x="64.8103%" y="207.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="65.1140%" y="197" width="0.0326%" height="15" fill="rgb(238,219,53)"/><text x="65.3640%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.07%)</title><rect x="65.6352%" y="165" width="0.0651%" height="15" fill="rgb(232,167,36)"/><text x="65.8852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="65.6678%" y="149" width="0.0326%" height="15" fill="rgb(244,19,51)"/><text x="65.9178%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="65.6678%" y="133" width="0.0326%" height="15" fill="rgb(224,6,22)"/><text x="65.9178%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="65.7003%" y="165" width="0.0326%" height="15" fill="rgb(224,145,5)"/><text x="65.9503%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="65.7003%" y="149" width="0.0326%" height="15" fill="rgb(234,130,49)"/><text x="65.9503%" y="159.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="65.7329%" y="165" width="0.0977%" height="15" fill="rgb(254,6,2)"/><text x="65.9829%" y="175.50"></text></g><g><title>prof`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.49%)</title><rect x="65.4072%" y="181" width="0.4886%" height="15" fill="rgb(208,96,46)"/><text x="65.6572%" y="191.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.07%)</title><rect x="65.8306%" y="165" width="0.0651%" height="15" fill="rgb(239,3,39)"/><text x="66.0806%" y="175.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="65.8958%" y="181" width="0.0326%" height="15" fill="rgb(233,210,1)"/><text x="66.1458%" y="191.50"></text></g><g><title>prof`&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (25 samples, 0.81%)</title><rect x="65.1466%" y="197" width="0.8143%" height="15" fill="rgb(244,137,37)"/><text x="65.3966%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="65.9283%" y="181" width="0.0326%" height="15" fill="rgb(240,136,2)"/><text x="66.1783%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="65.9283%" y="165" width="0.0326%" height="15" fill="rgb(239,18,37)"/><text x="66.1783%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="65.9283%" y="149" width="0.0326%" height="15" fill="rgb(218,185,22)"/><text x="66.1783%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.03%)</title><rect x="65.9283%" y="133" width="0.0326%" height="15" fill="rgb(225,218,4)"/><text x="66.1783%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="65.9283%" y="117" width="0.0326%" height="15" fill="rgb(230,182,32)"/><text x="66.1783%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="65.9283%" y="101" width="0.0326%" height="15" fill="rgb(242,56,43)"/><text x="66.1783%" y="111.50"></text></g><g><title>prof`&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.26%)</title><rect x="65.9609%" y="197" width="0.2606%" height="15" fill="rgb(233,99,24)"/><text x="66.2109%" y="207.50"></text></g><g><title>prof`DYLD-STUB$$realloc (1 samples, 0.03%)</title><rect x="66.2215%" y="197" width="0.0326%" height="15" fill="rgb(234,209,42)"/><text x="66.4715%" y="207.50"></text></g><g><title>prof`__rdl_realloc (1 samples, 0.03%)</title><rect x="66.2541%" y="197" width="0.0326%" height="15" fill="rgb(227,7,12)"/><text x="66.5041%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.13%)</title><rect x="66.6450%" y="181" width="0.1303%" height="15" fill="rgb(245,203,43)"/><text x="66.8950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (5 samples, 0.16%)</title><rect x="67.2313%" y="149" width="0.1629%" height="15" fill="rgb(238,205,33)"/><text x="67.4813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (2 samples, 0.07%)</title><rect x="67.3941%" y="149" width="0.0651%" height="15" fill="rgb(231,56,7)"/><text x="67.6441%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.07%)</title><rect x="67.4593%" y="149" width="0.0651%" height="15" fill="rgb(244,186,29)"/><text x="67.7093%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="67.5244%" y="149" width="0.0326%" height="15" fill="rgb(234,111,31)"/><text x="67.7744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.46%)</title><rect x="68.0130%" y="133" width="0.4560%" height="15" fill="rgb(241,149,10)"/><text x="68.2630%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="68.4365%" y="117" width="0.0326%" height="15" fill="rgb(249,206,44)"/><text x="68.6865%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="68.4365%" y="101" width="0.0326%" height="15" fill="rgb(251,153,30)"/><text x="68.6865%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.16%)</title><rect x="68.4691%" y="133" width="0.1629%" height="15" fill="rgb(239,152,38)"/><text x="68.7191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="69.2182%" y="101" width="0.0326%" height="15" fill="rgb(249,139,47)"/><text x="69.4682%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.68%)</title><rect x="68.6319%" y="133" width="0.6840%" height="15" fill="rgb(244,64,35)"/><text x="68.8819%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.62%)</title><rect x="68.6971%" y="117" width="0.6189%" height="15" fill="rgb(216,46,15)"/><text x="68.9471%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="69.2508%" y="101" width="0.0651%" height="15" fill="rgb(250,74,19)"/><text x="69.5008%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.72%)</title><rect x="69.3160%" y="133" width="0.7166%" height="15" fill="rgb(249,42,33)"/><text x="69.5660%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.52%)</title><rect x="69.5114%" y="117" width="0.5212%" height="15" fill="rgb(242,149,17)"/><text x="69.7614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="70.0326%" y="133" width="0.0326%" height="15" fill="rgb(244,29,21)"/><text x="70.2826%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="70.0651%" y="133" width="0.0326%" height="15" fill="rgb(220,130,37)"/><text x="70.3151%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.23%)</title><rect x="70.9772%" y="117" width="0.2280%" height="15" fill="rgb(211,67,2)"/><text x="71.2272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (46 samples, 1.50%)</title><rect x="70.0977%" y="133" width="1.4984%" height="15" fill="rgb(235,68,52)"/><text x="70.3477%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.39%)</title><rect x="71.2052%" y="117" width="0.3909%" height="15" fill="rgb(246,142,3)"/><text x="71.4552%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (126 samples, 4.10%)</title><rect x="67.5570%" y="149" width="4.1042%" height="15" fill="rgb(241,25,7)"/><text x="67.8070%" y="159.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="71.5961%" y="133" width="0.0651%" height="15" fill="rgb(242,119,39)"/><text x="71.8461%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="71.6612%" y="149" width="0.0326%" height="15" fill="rgb(241,98,45)"/><text x="71.9112%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (141 samples, 4.59%)</title><rect x="67.1336%" y="165" width="4.5928%" height="15" fill="rgb(254,28,30)"/><text x="67.3836%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.03%)</title><rect x="71.6938%" y="149" width="0.0326%" height="15" fill="rgb(241,142,54)"/><text x="71.9438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.46%)</title><rect x="71.7264%" y="165" width="0.4560%" height="15" fill="rgb(222,85,15)"/><text x="71.9764%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.42%)</title><rect x="71.7590%" y="149" width="0.4235%" height="15" fill="rgb(210,85,47)"/><text x="72.0090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (167 samples, 5.44%)</title><rect x="66.7752%" y="181" width="5.4397%" height="15" fill="rgb(224,206,25)"/><text x="67.0252%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="72.1824%" y="165" width="0.0326%" height="15" fill="rgb(243,201,19)"/><text x="72.4324%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="72.2150%" y="181" width="0.0326%" height="15" fill="rgb(236,59,4)"/><text x="72.4650%" y="191.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (188 samples, 6.12%)</title><rect x="66.2866%" y="197" width="6.1238%" height="15" fill="rgb(254,179,45)"/><text x="66.5366%" y="207.50">prof`all..</text></g><g><title>prof`__rdl_realloc (5 samples, 0.16%)</title><rect x="72.2476%" y="181" width="0.1629%" height="15" fill="rgb(226,14,10)"/><text x="72.4976%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.29%)</title><rect x="76.3518%" y="181" width="0.2932%" height="15" fill="rgb(244,27,41)"/><text x="76.6018%" y="191.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (48 samples, 1.56%)</title><rect x="76.6450%" y="181" width="1.5635%" height="15" fill="rgb(235,35,32)"/><text x="76.8950%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.36%)</title><rect x="78.2085%" y="181" width="0.3583%" height="15" fill="rgb(218,68,31)"/><text x="78.4585%" y="191.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (136 samples, 4.43%)</title><rect x="82.2150%" y="165" width="4.4300%" height="15" fill="rgb(207,120,37)"/><text x="82.4650%" y="175.50">prof`..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="89.6091%" y="133" width="0.0326%" height="15" fill="rgb(227,98,0)"/><text x="89.8591%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="89.6417%" y="133" width="0.1629%" height="15" fill="rgb(207,7,3)"/><text x="89.8917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.07%)</title><rect x="89.7394%" y="117" width="0.0651%" height="15" fill="rgb(206,98,19)"/><text x="89.9894%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.07%)</title><rect x="89.7394%" y="101" width="0.0651%" height="15" fill="rgb(217,5,26)"/><text x="89.9894%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="89.8046%" y="133" width="0.0326%" height="15" fill="rgb(235,190,38)"/><text x="90.0546%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="89.8046%" y="117" width="0.0326%" height="15" fill="rgb(247,86,24)"/><text x="90.0546%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="89.8046%" y="101" width="0.0326%" height="15" fill="rgb(205,101,16)"/><text x="90.0546%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.10%)</title><rect x="89.8371%" y="133" width="0.0977%" height="15" fill="rgb(246,168,33)"/><text x="90.0871%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="89.9349%" y="133" width="0.0326%" height="15" fill="rgb(231,114,1)"/><text x="90.1849%" y="143.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="89.9674%" y="133" width="0.0326%" height="15" fill="rgb(207,184,53)"/><text x="90.2174%" y="143.50"></text></g><g><title>prof`__rdl_alloc (3 samples, 0.10%)</title><rect x="90.0000%" y="133" width="0.0977%" height="15" fill="rgb(224,95,51)"/><text x="90.2500%" y="143.50"></text></g><g><title>prof`hashbrown::map::make_hash (27 samples, 0.88%)</title><rect x="90.0977%" y="133" width="0.8795%" height="15" fill="rgb(212,188,45)"/><text x="90.3477%" y="143.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.72%)</title><rect x="90.2606%" y="117" width="0.7166%" height="15" fill="rgb(223,154,38)"/><text x="90.5106%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.23%)</title><rect x="92.2150%" y="85" width="0.2280%" height="15" fill="rgb(251,22,52)"/><text x="92.4650%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="92.8339%" y="69" width="0.0326%" height="15" fill="rgb(229,209,22)"/><text x="93.0839%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.26%)</title><rect x="96.0261%" y="53" width="0.2606%" height="15" fill="rgb(234,138,34)"/><text x="96.2761%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (168 samples, 5.47%)</title><rect x="91.9218%" y="101" width="5.4723%" height="15" fill="rgb(212,95,11)"/><text x="92.1718%" y="111.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (152 samples, 4.95%)</title><rect x="92.4430%" y="85" width="4.9511%" height="15" fill="rgb(240,179,47)"/><text x="92.6930%" y="95.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (139 samples, 4.53%)</title><rect x="92.8664%" y="69" width="4.5277%" height="15" fill="rgb(240,163,11)"/><text x="93.1164%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (34 samples, 1.11%)</title><rect x="96.2866%" y="53" width="1.1075%" height="15" fill="rgb(236,37,12)"/><text x="96.5366%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.39%)</title><rect x="97.0033%" y="37" width="0.3909%" height="15" fill="rgb(232,164,16)"/><text x="97.2533%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (182 samples, 5.93%)</title><rect x="91.5309%" y="117" width="5.9283%" height="15" fill="rgb(244,205,15)"/><text x="91.7809%" y="127.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="97.3941%" y="101" width="0.0651%" height="15" fill="rgb(223,117,47)"/><text x="97.6441%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.07%)</title><rect x="97.4593%" y="117" width="0.0651%" height="15" fill="rgb(244,107,35)"/><text x="97.7093%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (7 samples, 0.23%)</title><rect x="97.5244%" y="117" width="0.2280%" height="15" fill="rgb(205,140,8)"/><text x="97.7744%" y="127.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (591 samples, 19.25%)</title><rect x="78.5668%" y="181" width="19.2508%" height="15" fill="rgb(228,84,46)"/><text x="78.8168%" y="191.50">prof`hashbrown::map::HashMap&lt;K..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (343 samples, 11.17%)</title><rect x="86.6450%" y="165" width="11.1726%" height="15" fill="rgb(254,188,9)"/><text x="86.8950%" y="175.50">prof`hashbrown::..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (291 samples, 9.48%)</title><rect x="88.3388%" y="149" width="9.4788%" height="15" fill="rgb(206,112,54)"/><text x="88.5888%" y="159.50">prof`hashbrown..</text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (210 samples, 6.84%)</title><rect x="90.9772%" y="133" width="6.8404%" height="15" fill="rgb(216,84,49)"/><text x="91.2272%" y="143.50">prof`hash..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="97.7524%" y="117" width="0.0651%" height="15" fill="rgb(214,194,35)"/><text x="98.0024%" y="127.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.07%)</title><rect x="97.8176%" y="181" width="0.0651%" height="15" fill="rgb(249,28,3)"/><text x="98.0676%" y="191.50"></text></g><g><title>prof`hashbrown::raw::sse2::Group::static_empty (1 samples, 0.03%)</title><rect x="97.8827%" y="181" width="0.0326%" height="15" fill="rgb(222,56,52)"/><text x="98.1327%" y="191.50"></text></g><g><title>prof`cress::engine::piece::generate_moves (792 samples, 25.80%)</title><rect x="72.4104%" y="197" width="25.7980%" height="15" fill="rgb(245,217,50)"/><text x="72.6604%" y="207.50">prof`cress::engine::piece::generate_moves</text></g><g><title>prof`std::collections::hash::map::RandomState::new::KEYS::__getit (9 samples, 0.29%)</title><rect x="97.9153%" y="181" width="0.2932%" height="15" fill="rgb(213,201,24)"/><text x="98.1653%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="98.3713%" y="133" width="0.0326%" height="15" fill="rgb(248,116,28)"/><text x="98.6213%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.03%)</title><rect x="98.3713%" y="117" width="0.0326%" height="15" fill="rgb(219,72,43)"/><text x="98.6213%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.3713%" y="101" width="0.0326%" height="15" fill="rgb(209,138,14)"/><text x="98.6213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.3713%" y="85" width="0.0326%" height="15" fill="rgb(222,18,33)"/><text x="98.6213%" y="95.50"></text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.23%)</title><rect x="98.2085%" y="197" width="0.2280%" height="15" fill="rgb(213,199,7)"/><text x="98.4585%" y="207.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.07%)</title><rect x="98.3713%" y="181" width="0.0651%" height="15" fill="rgb(250,110,10)"/><text x="98.6213%" y="191.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.07%)</title><rect x="98.3713%" y="165" width="0.0651%" height="15" fill="rgb(248,123,6)"/><text x="98.6213%" y="175.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (2 samples, 0.07%)</title><rect x="98.3713%" y="149" width="0.0651%" height="15" fill="rgb(206,91,31)"/><text x="98.6213%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="98.4039%" y="133" width="0.0326%" height="15" fill="rgb(211,154,13)"/><text x="98.6539%" y="143.50"></text></g><g><title>prof`hashbrown::raw::sse2::Group::static_empty (2 samples, 0.07%)</title><rect x="98.4365%" y="197" width="0.0651%" height="15" fill="rgb(225,148,7)"/><text x="98.6865%" y="207.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (1,414 samples, 46.06%)</title><rect x="52.7362%" y="213" width="46.0586%" height="15" fill="rgb(220,160,43)"/><text x="52.9862%" y="223.50">prof`cress::engine::piece::Piece::all_moves</text></g><g><title>prof`std::collections::hash::map::RandomState::new::KEYS::__getit (9 samples, 0.29%)</title><rect x="98.5016%" y="197" width="0.2932%" height="15" fill="rgb(213,52,39)"/><text x="98.7516%" y="207.50"></text></g><g><title>prof`cress::engine::piece::generate_moves (1 samples, 0.03%)</title><rect x="98.7948%" y="213" width="0.0326%" height="15" fill="rgb(243,137,7)"/><text x="99.0448%" y="223.50"></text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (2,745 samples, 89.41%)</title><rect x="9.4463%" y="245" width="89.4137%" height="15" fill="rgb(230,79,13)"/><text x="9.6963%" y="255.50">prof`cress::engine::structs::ChessState::square_is_attacked</text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_pseudo_moves (2,665 samples, 86.81%)</title><rect x="12.0521%" y="229" width="86.8078%" height="15" fill="rgb(247,105,23)"/><text x="12.3021%" y="239.50">prof`cress::engine::structs::ChessState::generate_all_pseudo_moves</text></g><g><title>prof`hashbrown::raw::sse2::Group::static_empty (1 samples, 0.03%)</title><rect x="98.8274%" y="213" width="0.0326%" height="15" fill="rgb(223,179,41)"/><text x="99.0774%" y="223.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.23%)</title><rect x="99.0554%" y="229" width="0.2280%" height="15" fill="rgb(218,9,34)"/><text x="99.3054%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="99.5114%" y="197" width="0.0326%" height="15" fill="rgb(222,106,8)"/><text x="99.7614%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.07%)</title><rect x="99.5440%" y="197" width="0.0651%" height="15" fill="rgb(211,220,0)"/><text x="99.7940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="99.5765%" y="181" width="0.0326%" height="15" fill="rgb(229,52,16)"/><text x="99.8265%" y="191.50"></text></g><g><title>prof`hashbrown::map::make_hash (10 samples, 0.33%)</title><rect x="99.6091%" y="197" width="0.3257%" height="15" fill="rgb(212,155,18)"/><text x="99.8591%" y="207.50"></text></g><g><title>prof`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.20%)</title><rect x="99.7394%" y="181" width="0.1954%" height="15" fill="rgb(242,21,14)"/><text x="99.9894%" y="191.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (2,925 samples, 95.28%)</title><rect x="4.6906%" y="261" width="95.2769%" height="15" fill="rgb(222,19,48)"/><text x="4.9406%" y="271.50">prof`cress::engine::structs::ChessState::generate_all_legal_moves</text></g><g><title>prof`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (34 samples, 1.11%)</title><rect x="98.8599%" y="245" width="1.1075%" height="15" fill="rgb(232,45,27)"/><text x="99.1099%" y="255.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::insert (21 samples, 0.68%)</title><rect x="99.2834%" y="229" width="0.6840%" height="15" fill="rgb(249,103,42)"/><text x="99.5334%" y="239.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (19 samples, 0.62%)</title><rect x="99.3485%" y="213" width="0.6189%" height="15" fill="rgb(246,81,33)"/><text x="99.5985%" y="223.50"></text></g><g><title>prof`hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="99.9349%" y="197" width="0.0326%" height="15" fill="rgb(252,33,42)"/><text x="100.1849%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="99.9349%" y="181" width="0.0326%" height="15" fill="rgb(209,212,41)"/><text x="100.1849%" y="191.50"></text></g><g><title>all (3,070 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(207,154,6)"/><text x="0.2500%" y="463.50"></text></g><g><title>prof`0x1 (3,070 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(223,64,47)"/><text x="0.2500%" y="447.50">prof`0x1</text></g><g><title>libdyld.dylib`start (3,070 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(211,161,38)"/><text x="0.2500%" y="431.50">libdyld.dylib`start</text></g><g><title>prof`main (3,070 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(219,138,40)"/><text x="0.2500%" y="415.50">prof`main</text></g><g><title>prof`std::rt::lang_start_internal (3,069 samples, 99.97%)</title><rect x="0.0326%" y="389" width="99.9674%" height="15" fill="rgb(241,228,46)"/><text x="0.2826%" y="399.50">prof`std::rt::lang_start_internal</text></g><g><title>prof`std::rt::lang_start::_{{closure}} (3,069 samples, 99.97%)</title><rect x="0.0326%" y="373" width="99.9674%" height="15" fill="rgb(223,209,38)"/><text x="0.2826%" y="383.50">prof`std::rt::lang_start::_{{closure}}</text></g><g><title>prof`std::sys_common::backtrace::__rust_begin_short_backtrace (3,069 samples, 99.97%)</title><rect x="0.0326%" y="357" width="99.9674%" height="15" fill="rgb(236,164,45)"/><text x="0.2826%" y="367.50">prof`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>prof`prof::main (3,069 samples, 99.97%)</title><rect x="0.0326%" y="341" width="99.9674%" height="15" fill="rgb(231,15,5)"/><text x="0.2826%" y="351.50">prof`prof::main</text></g><g><title>prof`prof::generate_moves (3,069 samples, 99.97%)</title><rect x="0.0326%" y="325" width="99.9674%" height="15" fill="rgb(252,35,15)"/><text x="0.2826%" y="335.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (3,068 samples, 99.93%)</title><rect x="0.0651%" y="309" width="99.9349%" height="15" fill="rgb(248,181,18)"/><text x="0.3151%" y="319.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (3,061 samples, 99.71%)</title><rect x="0.2932%" y="293" width="99.7068%" height="15" fill="rgb(233,39,42)"/><text x="0.5432%" y="303.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (2,932 samples, 95.50%)</title><rect x="4.4951%" y="277" width="95.5049%" height="15" fill="rgb(238,110,33)"/><text x="4.7451%" y="287.50">prof`prof::generate_moves</text></g><g><title>prof`cress::engine::structs::ChessState::make_move_unchecked (1 samples, 0.03%)</title><rect x="99.9674%" y="261" width="0.0326%" height="15" fill="rgb(233,195,10)"/><text x="100.2174%" y="271.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.71%)</title><rect x="0.0000%" y="325" width="0.7092%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.71%)</title><rect x="0.7092%" y="181" width="0.7092%" height="15" fill="rgb(217,0,24)"/><text x="0.9592%" y="191.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.71%)</title><rect x="1.4184%" y="181" width="0.7092%" height="15" fill="rgb(221,193,54)"/><text x="1.6684%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.71%)</title><rect x="1.4184%" y="165" width="0.7092%" height="15" fill="rgb(248,212,6)"/><text x="1.6684%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.71%)</title><rect x="1.4184%" y="149" width="0.7092%" height="15" fill="rgb(208,68,35)"/><text x="1.6684%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.71%)</title><rect x="1.4184%" y="133" width="0.7092%" height="15" fill="rgb(232,128,0)"/><text x="1.6684%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.71%)</title><rect x="1.4184%" y="117" width="0.7092%" height="15" fill="rgb(207,160,47)"/><text x="1.6684%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.71%)</title><rect x="2.1277%" y="165" width="0.7092%" height="15" fill="rgb(228,23,34)"/><text x="2.3777%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.71%)</title><rect x="2.8369%" y="165" width="0.7092%" height="15" fill="rgb(218,30,26)"/><text x="3.0869%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.71%)</title><rect x="2.8369%" y="149" width="0.7092%" height="15" fill="rgb(220,122,19)"/><text x="3.0869%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.71%)</title><rect x="2.8369%" y="133" width="0.7092%" height="15" fill="rgb(250,228,42)"/><text x="3.0869%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.71%)</title><rect x="2.8369%" y="117" width="0.7092%" height="15" fill="rgb(240,193,28)"/><text x="3.0869%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.71%)</title><rect x="2.8369%" y="101" width="0.7092%" height="15" fill="rgb(216,20,37)"/><text x="3.0869%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.71%)</title><rect x="3.5461%" y="133" width="0.7092%" height="15" fill="rgb(206,188,39)"/><text x="3.7961%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.71%)</title><rect x="3.5461%" y="117" width="0.7092%" height="15" fill="rgb(217,207,13)"/><text x="3.7961%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.71%)</title><rect x="3.5461%" y="101" width="0.7092%" height="15" fill="rgb(231,73,38)"/><text x="3.7961%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.71%)</title><rect x="3.5461%" y="85" width="0.7092%" height="15" fill="rgb(225,20,46)"/><text x="3.7961%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.71%)</title><rect x="3.5461%" y="69" width="0.7092%" height="15" fill="rgb(210,31,41)"/><text x="3.7961%" y="79.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 1.42%)</title><rect x="3.5461%" y="165" width="1.4184%" height="15" fill="rgb(221,200,47)"/><text x="3.7961%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 1.42%)</title><rect x="3.5461%" y="149" width="1.4184%" height="15" fill="rgb(226,26,5)"/><text x="3.7961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.71%)</title><rect x="4.2553%" y="133" width="0.7092%" height="15" fill="rgb(249,33,26)"/><text x="4.5053%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.71%)</title><rect x="4.2553%" y="117" width="0.7092%" height="15" fill="rgb(235,183,28)"/><text x="4.5053%" y="127.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (6 samples, 4.26%)</title><rect x="2.1277%" y="181" width="4.2553%" height="15" fill="rgb(221,5,38)"/><text x="2.3777%" y="191.50">prof`..</text></g><g><title>prof`cress::engine::piece::generate_moves (2 samples, 1.42%)</title><rect x="4.9645%" y="165" width="1.4184%" height="15" fill="rgb(247,18,42)"/><text x="5.2145%" y="175.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (1 samples, 0.71%)</title><rect x="5.6738%" y="149" width="0.7092%" height="15" fill="rgb(241,131,45)"/><text x="5.9238%" y="159.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (9 samples, 6.38%)</title><rect x="0.7092%" y="197" width="6.3830%" height="15" fill="rgb(249,31,29)"/><text x="0.9592%" y="207.50">prof`cre..</text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (1 samples, 0.71%)</title><rect x="6.3830%" y="181" width="0.7092%" height="15" fill="rgb(225,111,53)"/><text x="6.6330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.71%)</title><rect x="9.2199%" y="181" width="0.7092%" height="15" fill="rgb(238,160,17)"/><text x="9.4699%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.71%)</title><rect x="9.9291%" y="181" width="0.7092%" height="15" fill="rgb(214,148,48)"/><text x="10.1791%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 4.26%)</title><rect x="23.4043%" y="165" width="4.2553%" height="15" fill="rgb(232,36,49)"/><text x="23.6543%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 4.26%)</title><rect x="23.4043%" y="149" width="4.2553%" height="15" fill="rgb(209,103,24)"/><text x="23.6543%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 2.84%)</title><rect x="24.8227%" y="133" width="2.8369%" height="15" fill="rgb(229,88,8)"/><text x="25.0727%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.71%)</title><rect x="29.0780%" y="133" width="0.7092%" height="15" fill="rgb(213,181,19)"/><text x="29.3280%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 2.84%)</title><rect x="27.6596%" y="165" width="2.8369%" height="15" fill="rgb(254,191,54)"/><text x="27.9096%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 2.13%)</title><rect x="28.3688%" y="149" width="2.1277%" height="15" fill="rgb(241,83,37)"/><text x="28.6188%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.71%)</title><rect x="29.7872%" y="133" width="0.7092%" height="15" fill="rgb(233,36,39)"/><text x="30.0372%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 2.84%)</title><rect x="30.4965%" y="165" width="2.8369%" height="15" fill="rgb(226,3,54)"/><text x="30.7465%" y="175.50">li..</text></g><g><title>prof`__rdl_alloc (1 samples, 0.71%)</title><rect x="33.3333%" y="165" width="0.7092%" height="15" fill="rgb(245,192,40)"/><text x="33.5833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 1.42%)</title><rect x="35.4610%" y="149" width="1.4184%" height="15" fill="rgb(238,167,29)"/><text x="35.7110%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 1.42%)</title><rect x="35.4610%" y="133" width="1.4184%" height="15" fill="rgb(232,182,51)"/><text x="35.7110%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.42%)</title><rect x="35.4610%" y="117" width="1.4184%" height="15" fill="rgb(231,60,39)"/><text x="35.7110%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.42%)</title><rect x="35.4610%" y="101" width="1.4184%" height="15" fill="rgb(208,69,12)"/><text x="35.7110%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.71%)</title><rect x="36.1702%" y="85" width="0.7092%" height="15" fill="rgb(235,93,37)"/><text x="36.4202%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.71%)</title><rect x="38.2979%" y="101" width="0.7092%" height="15" fill="rgb(213,116,39)"/><text x="38.5479%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.71%)</title><rect x="38.2979%" y="85" width="0.7092%" height="15" fill="rgb(222,207,29)"/><text x="38.5479%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.71%)</title><rect x="38.2979%" y="69" width="0.7092%" height="15" fill="rgb(206,96,30)"/><text x="38.5479%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 2.84%)</title><rect x="39.0071%" y="101" width="2.8369%" height="15" fill="rgb(218,138,4)"/><text x="39.2571%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 2.84%)</title><rect x="39.0071%" y="85" width="2.8369%" height="15" fill="rgb(250,191,14)"/><text x="39.2571%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 2.13%)</title><rect x="39.7163%" y="69" width="2.1277%" height="15" fill="rgb(239,60,40)"/><text x="39.9663%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 8.51%)</title><rect x="36.8794%" y="149" width="8.5106%" height="15" fill="rgb(206,27,48)"/><text x="37.1294%" y="159.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 8.51%)</title><rect x="36.8794%" y="133" width="8.5106%" height="15" fill="rgb(225,35,8)"/><text x="37.1294%" y="143.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 7.80%)</title><rect x="37.5887%" y="117" width="7.8014%" height="15" fill="rgb(250,213,24)"/><text x="37.8387%" y="127.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 3.55%)</title><rect x="41.8440%" y="101" width="3.5461%" height="15" fill="rgb(247,123,22)"/><text x="42.0940%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.71%)</title><rect x="44.6809%" y="85" width="0.7092%" height="15" fill="rgb(231,138,38)"/><text x="44.9309%" y="95.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 12.06%)</title><rect x="34.0426%" y="165" width="12.0567%" height="15" fill="rgb(231,145,46)"/><text x="34.2926%" y="175.50">prof`alloc::raw_ve..</text></g><g><title>prof`__rdl_realloc (1 samples, 0.71%)</title><rect x="45.3901%" y="149" width="0.7092%" height="15" fill="rgb(251,118,11)"/><text x="45.6401%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.71%)</title><rect x="51.7730%" y="149" width="0.7092%" height="15" fill="rgb(217,147,25)"/><text x="52.0230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 2.84%)</title><rect x="52.4823%" y="149" width="2.8369%" height="15" fill="rgb(247,81,37)"/><text x="52.7323%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 2.13%)</title><rect x="53.1915%" y="133" width="2.1277%" height="15" fill="rgb(209,12,38)"/><text x="53.4415%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 2.13%)</title><rect x="53.1915%" y="117" width="2.1277%" height="15" fill="rgb(227,1,9)"/><text x="53.4415%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 2.13%)</title><rect x="55.3191%" y="149" width="2.1277%" height="15" fill="rgb(248,47,43)"/><text x="55.5691%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 2.13%)</title><rect x="55.3191%" y="133" width="2.1277%" height="15" fill="rgb(221,10,30)"/><text x="55.5691%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 1.42%)</title><rect x="56.0284%" y="117" width="1.4184%" height="15" fill="rgb(210,229,1)"/><text x="56.2784%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.71%)</title><rect x="58.1560%" y="117" width="0.7092%" height="15" fill="rgb(222,148,37)"/><text x="58.4060%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 4.96%)</title><rect x="57.4468%" y="149" width="4.9645%" height="15" fill="rgb(234,67,33)"/><text x="57.6968%" y="159.50">libsys..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 4.26%)</title><rect x="58.1560%" y="133" width="4.2553%" height="15" fill="rgb(247,98,35)"/><text x="58.4060%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 3.55%)</title><rect x="58.8652%" y="117" width="3.5461%" height="15" fill="rgb(247,138,52)"/><text x="59.1152%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 3.55%)</title><rect x="58.8652%" y="101" width="3.5461%" height="15" fill="rgb(213,79,30)"/><text x="59.1152%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.71%)</title><rect x="61.7021%" y="85" width="0.7092%" height="15" fill="rgb(246,177,23)"/><text x="61.9521%" y="95.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (2 samples, 1.42%)</title><rect x="62.4113%" y="149" width="1.4184%" height="15" fill="rgb(230,62,27)"/><text x="62.6613%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.71%)</title><rect x="64.5390%" y="117" width="0.7092%" height="15" fill="rgb(216,154,8)"/><text x="64.7890%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 2.84%)</title><rect x="65.9574%" y="85" width="2.8369%" height="15" fill="rgb(244,35,45)"/><text x="66.2074%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.71%)</title><rect x="68.0851%" y="69" width="0.7092%" height="15" fill="rgb(251,115,12)"/><text x="68.3351%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.71%)</title><rect x="69.5035%" y="53" width="0.7092%" height="15" fill="rgb(240,54,50)"/><text x="69.7535%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 2.13%)</title><rect x="68.7943%" y="85" width="2.1277%" height="15" fill="rgb(233,84,52)"/><text x="69.0443%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 2.13%)</title><rect x="68.7943%" y="69" width="2.1277%" height="15" fill="rgb(207,117,47)"/><text x="69.0443%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.71%)</title><rect x="70.2128%" y="53" width="0.7092%" height="15" fill="rgb(249,43,39)"/><text x="70.4628%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.71%)</title><rect x="70.2128%" y="37" width="0.7092%" height="15" fill="rgb(209,38,44)"/><text x="70.4628%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.71%)</title><rect x="70.9220%" y="85" width="0.7092%" height="15" fill="rgb(236,212,23)"/><text x="71.1720%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.71%)</title><rect x="70.9220%" y="69" width="0.7092%" height="15" fill="rgb(242,79,21)"/><text x="71.1720%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 7.09%)</title><rect x="65.2482%" y="117" width="7.0922%" height="15" fill="rgb(211,96,35)"/><text x="65.4982%" y="127.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 6.38%)</title><rect x="65.9574%" y="101" width="6.3830%" height="15" fill="rgb(253,215,40)"/><text x="66.2074%" y="111.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.71%)</title><rect x="71.6312%" y="85" width="0.7092%" height="15" fill="rgb(211,81,21)"/><text x="71.8812%" y="95.50"></text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 9.93%)</title><rect x="63.8298%" y="149" width="9.9291%" height="15" fill="rgb(208,190,38)"/><text x="64.0798%" y="159.50">prof`alloc::ra..</text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 9.22%)</title><rect x="64.5390%" y="133" width="9.2199%" height="15" fill="rgb(235,213,38)"/><text x="64.7890%" y="143.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 1.42%)</title><rect x="72.3404%" y="117" width="1.4184%" height="15" fill="rgb(237,122,38)"/><text x="72.5904%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.71%)</title><rect x="73.0496%" y="101" width="0.7092%" height="15" fill="rgb(244,218,35)"/><text x="73.2996%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.71%)</title><rect x="75.1773%" y="133" width="0.7092%" height="15" fill="rgb(240,68,47)"/><text x="75.4273%" y="143.50"></text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (3 samples, 2.13%)</title><rect x="75.8865%" y="133" width="2.1277%" height="15" fill="rgb(210,16,53)"/><text x="76.1365%" y="143.50">p..</text></g><g><title>prof`__rust_alloc (1 samples, 0.71%)</title><rect x="78.0142%" y="133" width="0.7092%" height="15" fill="rgb(235,124,12)"/><text x="78.2642%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.71%)</title><rect x="79.4326%" y="69" width="0.7092%" height="15" fill="rgb(224,169,11)"/><text x="79.6826%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 4.96%)</title><rect x="78.7234%" y="117" width="4.9645%" height="15" fill="rgb(250,166,2)"/><text x="78.9734%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 4.26%)</title><rect x="79.4326%" y="101" width="4.2553%" height="15" fill="rgb(242,216,29)"/><text x="79.6826%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 4.26%)</title><rect x="79.4326%" y="85" width="4.2553%" height="15" fill="rgb(230,116,27)"/><text x="79.6826%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 3.55%)</title><rect x="80.1418%" y="69" width="3.5461%" height="15" fill="rgb(228,99,48)"/><text x="80.3918%" y="79.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.71%)</title><rect x="82.9787%" y="53" width="0.7092%" height="15" fill="rgb(253,11,6)"/><text x="83.2287%" y="63.50"></text></g><g><title>prof`cress::engine::piece::Piece::all_moves (54 samples, 38.30%)</title><rect x="46.0993%" y="165" width="38.2979%" height="15" fill="rgb(247,143,39)"/><text x="46.3493%" y="175.50">prof`cress::engine::piece::Piece::all_moves</text></g><g><title>prof`cress::engine::piece::generate_moves (15 samples, 10.64%)</title><rect x="73.7589%" y="149" width="10.6383%" height="15" fill="rgb(236,97,10)"/><text x="74.0089%" y="159.50">prof`cress::engi..</text></g><g><title>prof`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 5.67%)</title><rect x="78.7234%" y="133" width="5.6738%" height="15" fill="rgb(233,208,19)"/><text x="78.9734%" y="143.50">prof`al..</text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.71%)</title><rect x="83.6879%" y="117" width="0.7092%" height="15" fill="rgb(216,164,2)"/><text x="83.9379%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.71%)</title><rect x="83.6879%" y="101" width="0.7092%" height="15" fill="rgb(220,129,5)"/><text x="83.9379%" y="111.50"></text></g><g><title>prof`cress::engine::structs::ChessState::make_move_unchecked (1 samples, 0.71%)</title><rect x="84.3972%" y="165" width="0.7092%" height="15" fill="rgb(242,17,10)"/><text x="84.6472%" y="175.50"></text></g><g><title>prof`cress::engine::structs::ChessState::generate_all_legal_moves (124 samples, 87.94%)</title><rect x="10.6383%" y="181" width="87.9433%" height="15" fill="rgb(242,107,0)"/><text x="10.8883%" y="191.50">prof`cress::engine::structs::ChessState::generate_all_legal_moves</text></g><g><title>prof`cress::engine::structs::ChessState::square_is_attacked (19 samples, 13.48%)</title><rect x="85.1064%" y="165" width="13.4752%" height="15" fill="rgb(251,28,31)"/><text x="85.3564%" y="175.50">prof`cress::engine::..</text></g><g><title>prof`&lt;&amp;cress::engine::square::Vec2 as core::ops::arith::Add&lt;&amp;cress::engine::square::Square&gt;&gt;::add (5 samples, 3.55%)</title><rect x="95.0355%" y="149" width="3.5461%" height="15" fill="rgb(233,223,10)"/><text x="95.2855%" y="159.50">prof..</text></g><g><title>all (141 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="383.50"></text></g><g><title>prof`0x1 (141 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="367.50">prof`0x1</text></g><g><title>libdyld.dylib`start (141 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>prof`main (140 samples, 99.29%)</title><rect x="0.7092%" y="325" width="99.2908%" height="15" fill="rgb(226,81,46)"/><text x="0.9592%" y="335.50">prof`main</text></g><g><title>prof`std::rt::lang_start_internal (140 samples, 99.29%)</title><rect x="0.7092%" y="309" width="99.2908%" height="15" fill="rgb(247,70,30)"/><text x="0.9592%" y="319.50">prof`std::rt::lang_start_internal</text></g><g><title>prof`std::rt::lang_start::_{{closure}} (140 samples, 99.29%)</title><rect x="0.7092%" y="293" width="99.2908%" height="15" fill="rgb(212,68,19)"/><text x="0.9592%" y="303.50">prof`std::rt::lang_start::_{{closure}}</text></g><g><title>prof`std::sys_common::backtrace::__rust_begin_short_backtrace (140 samples, 99.29%)</title><rect x="0.7092%" y="277" width="99.2908%" height="15" fill="rgb(240,187,13)"/><text x="0.9592%" y="287.50">prof`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>prof`prof::main (140 samples, 99.29%)</title><rect x="0.7092%" y="261" width="99.2908%" height="15" fill="rgb(223,113,26)"/><text x="0.9592%" y="271.50">prof`prof::main</text></g><g><title>prof`prof::generate_moves (140 samples, 99.29%)</title><rect x="0.7092%" y="245" width="99.2908%" height="15" fill="rgb(206,192,2)"/><text x="0.9592%" y="255.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (140 samples, 99.29%)</title><rect x="0.7092%" y="229" width="99.2908%" height="15" fill="rgb(241,108,4)"/><text x="0.9592%" y="239.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (140 samples, 99.29%)</title><rect x="0.7092%" y="213" width="99.2908%" height="15" fill="rgb(247,173,49)"/><text x="0.9592%" y="223.50">prof`prof::generate_moves</text></g><g><title>prof`prof::generate_moves (131 samples, 92.91%)</title><rect x="7.0922%" y="197" width="92.9078%" height="15" fill="rgb(224,114,35)"/><text x="7.3422%" y="207.50">prof`prof::generate_moves</text></g><g><title>prof`cress::engine::structs::ChessState::make_move_unchecked (2 samples, 1.42%)</title><rect x="98.5816%" y="181" width="1.4184%" height="15" fill="rgb(245,159,27)"/><text x="98.8316%" y="191.50"></text></g></svg></svg>